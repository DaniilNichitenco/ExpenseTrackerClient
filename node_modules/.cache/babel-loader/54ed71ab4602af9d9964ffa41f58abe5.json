{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Pages\\\\HomePage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CircularProgress } from '@material-ui/core';\nimport WalletsDoughnutDiagram from '../Diagrams/WalletsDoughnutDiagram';\nimport { Grid, makeStyles, Paper, Tab, Tabs, Typography, Box } from '@material-ui/core';\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\nimport { getCurrentUserWallets } from '../../Services/wallet.services/Wallet.service';\nimport { getExpensesSumForToday } from \"../../Services/expense.service/ExpenseService\";\nimport ExpensesList from \"../ExpensesList/ExpensesList\";\nimport GridPaperHeader from \"../GridPaper/GridPaperHeader\";\nimport { getDaysInMonth } from 'date-fns';\n\nconst TabPanel = props => {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      p: 0,\n      m: 4,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n};\n\n_c = TabPanel;\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    widht: \"fit-content\"\n  }\n});\n\nconst HomePage = () => {\n  _s();\n\n  const classes = useStyles();\n  const [isLoadingWallets, setIsLoadingWallets] = useState(true);\n  const [isLoadingExpenses, setIsLoadingExpenses] = useState(true);\n  const [walletsData, setWalletsData] = useSessionStorage(\"walletsData\", []);\n  const [dailyExpenseSum, setDailyExpenseSum] = useSessionStorage(\"dailyExpenseSum\", []);\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    getCurrentUserWallets().then(result => {\n      if (result.response.status == 200) {\n        setWalletsData(result.data);\n        setIsLoadingWallets(false);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    getExpensesSumForToday().then(result => {\n      if (result.response.status == 200) {\n        setDailyExpenseSum(result.data);\n        setIsLoadingExpenses(false);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  if (isLoadingWallets || isLoadingExpenses) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      xs: 12,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      justify: \"center\",\n      className: \"contentDiv\",\n      xs: 10,\n      xl: 9,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 11,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 12,\n          children: [/*#__PURE__*/_jsxDEV(GridPaperHeader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"center\",\n            className: classes.root,\n            children: [walletsData.length == 0 && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: \"There are not any wallets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              component: Tabs,\n              item: true,\n              value: value,\n              onChange: handleChange,\n              indicatorColor: \"primary\",\n              textColor: \"primary\",\n              centered: true,\n              children: walletsData.map(wallet => /*#__PURE__*/_jsxDEV(Grid, {\n                component: Tab,\n                item: true,\n                label: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  children: wallet.currencyCode.toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 37\n                }, this)\n              }, wallet.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            justify: \"center\",\n            xs: 12,\n            children: walletsData.map((wallet, index) => {\n              let expense = dailyExpenseSum.find(e => e.currencyCode == wallet.currencyCode);\n              let sum = 0;\n              let countDays = getDaysInMonth(new Date());\n\n              if (expense != undefined) {\n                sum = expense.sum;\n              }\n\n              let rest = wallet.bill / countDays - sum;\n\n              if (rest < 0) {\n                rest = 0;\n              }\n\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                component: TabPanel,\n                value: value,\n                index: index,\n                children: /*#__PURE__*/_jsxDEV(WalletsDoughnutDiagram, {\n                  title: \"Daily expenses, wallet \" + wallet.currencyCode.toUpperCase(),\n                  labels: [\"Remaining money\", \"Daily expenses\"],\n                  data: [Number(rest.toFixed(2)), Number(sum.toFixed(2))]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 37\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HomePage, \"OOEBz+3lMeRfYM0N7obnnM7L6r4=\", false, function () {\n  return [useStyles, useSessionStorage, useSessionStorage];\n});\n\n_c2 = HomePage;\nexport default HomePage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"HomePage\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Pages/HomePage.tsx"],"names":["React","useEffect","useState","CircularProgress","WalletsDoughnutDiagram","Grid","makeStyles","Paper","Tab","Tabs","Typography","Box","useSessionStorage","getCurrentUserWallets","getExpensesSumForToday","ExpensesList","GridPaperHeader","getDaysInMonth","TabPanel","props","children","value","index","other","useStyles","root","flexGrow","widht","HomePage","classes","isLoadingWallets","setIsLoadingWallets","isLoadingExpenses","setIsLoadingExpenses","walletsData","setWalletsData","dailyExpenseSum","setDailyExpenseSum","setValue","handleChange","event","newValue","then","result","response","status","data","catch","error","console","log","length","map","wallet","currencyCode","toUpperCase","id","expense","find","e","sum","countDays","Date","undefined","rest","bill","Number","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport WalletsDoughnutDiagram from '../Diagrams/WalletsDoughnutDiagram';\r\nimport { Grid, makeStyles, Paper, Tab, Tabs, Typography, Box } from '@material-ui/core';\r\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\r\nimport Wallet from '../../Data/Models/Wallets/Wallet';\r\nimport { getCurrentUserWallets } from '../../Services/wallet.services/Wallet.service';\r\nimport { ExpenseForSum } from \"../../Data/Models/Expenses/ExpenseForSum\";\r\nimport { getExpensesSumForToday } from \"../../Services/expense.service/ExpenseService\";\r\nimport ExpensesList from \"../ExpensesList/ExpensesList\";\r\nimport GridPaperHeader from \"../GridPaper/GridPaperHeader\";\r\nimport { getDaysInMonth } from 'date-fns';\r\n\r\ninterface TabPanelProps {\r\n    index: number,\r\n    value: number,\r\n  }\r\n  \r\n  const TabPanel: React.FC<TabPanelProps> = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={0} m={4}>\r\n              {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }  \r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      widht: \"fit-content\"\r\n    },\r\n  });\r\n  \r\nconst HomePage: React.FC = () => {\r\n\r\n    const classes = useStyles();\r\n    const [isLoadingWallets, setIsLoadingWallets] = useState(true);\r\n    const [isLoadingExpenses, setIsLoadingExpenses] = useState(true);\r\n    const [walletsData, setWalletsData] = useSessionStorage<Wallet[]>(\r\n        \"walletsData\", []\r\n        );\r\n    const [dailyExpenseSum, setDailyExpenseSum] = useSessionStorage<ExpenseForSum[]>(\r\n        \"dailyExpenseSum\", []\r\n        );\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getCurrentUserWallets()\r\n                .then(result => {\r\n                    if(result.response.status == 200)\r\n                    {\r\n                        setWalletsData(result.data);\r\n                        setIsLoadingWallets(false);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                })\r\n\r\n        getExpensesSumForToday()\r\n                .then(result => {\r\n\r\n                    if(result.response.status == 200)\r\n                    {\r\n                        setDailyExpenseSum(result.data);\r\n                        setIsLoadingExpenses(false);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        \r\n      }, []);\r\n\r\n      if(isLoadingWallets || isLoadingExpenses)\r\n      {\r\n        return(\r\n        <Grid container xs={12} justify=\"center\">\r\n            <CircularProgress color=\"secondary\" />\r\n        </Grid>\r\n        );\r\n      }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <Grid container item\r\n             justify=\"center\" className=\"contentDiv\" xs={10} xl={9}\r\n             >\r\n                <Grid item xs={11}>\r\n                    <Paper elevation={12}>\r\n                        <GridPaperHeader />\r\n                        <Grid container justify=\"center\" className={classes.root}>\r\n                            {walletsData.length == 0 &&\r\n                            <Typography variant=\"h4\">\r\n                                There are not any wallets\r\n                            </Typography>\r\n                            }\r\n                            <Grid\r\n                                component={Tabs}\r\n                                item\r\n                                value={value}\r\n                                onChange={handleChange}\r\n                                indicatorColor=\"primary\"\r\n                                textColor=\"primary\"\r\n                                centered\r\n                            >\r\n                                {walletsData.map((wallet) => (\r\n                                    <Grid component={Tab} item key={wallet.id} \r\n                                    label={\r\n                                    <Typography variant=\"h5\">\r\n                                        {wallet.currencyCode.toUpperCase()}\r\n                                    </Typography>}/>\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item justify=\"center\" xs={12}>\r\n                            {walletsData.map((wallet, index) => {\r\n                                let expense = dailyExpenseSum.find(e => \r\n                                    e.currencyCode == wallet.currencyCode);\r\n                                let sum:number = 0;\r\n                                let countDays: number = getDaysInMonth(new Date()); \r\n                                if(expense != undefined)\r\n                                {\r\n                                    sum = expense.sum;\r\n                                }\r\n\r\n                                let rest: number = wallet.bill / countDays - sum;\r\n                                if(rest < 0)\r\n                                {\r\n                                    rest = 0;\r\n                                }\r\n\r\n                                return(\r\n                                <Grid item xs={12} key={index}\r\n                                component={TabPanel} value={value} index={index}>\r\n                                    <WalletsDoughnutDiagram \r\n                                        title={\"Daily expenses, wallet \" + wallet.currencyCode.toUpperCase()}\r\n                                        labels={[\"Remaining money\", \"Daily expenses\" ]}\r\n                                        data={[Number((rest).toFixed(2)), Number((sum).toFixed(2))]}                        \r\n                                    />\r\n                                </Grid>\r\n                                )})}\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                <ExpensesList />\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}