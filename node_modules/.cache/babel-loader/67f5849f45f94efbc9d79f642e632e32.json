{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Forms\\\\AdminForms\\\\EditUserForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useForm, FormProvider } from \"react-hook-form\";\nimport { Button, DialogTitle, DialogContent, DialogContentText, DialogActions, makeStyles, Grid, Typography, CircularProgress } from \"@material-ui/core\";\nimport InputForm from '../InputForm/InputForm';\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { GetUserById, UpdateAccount } from \"../../../Services/user.services/User.service\";\nconst validationSchema = yup.object().shape({\n  id: yup.string().required(\"Enter id!\"),\n  userName: yup.string().required(\"Enter UserName!\").min(3, \"Minimum length is 3 characters!\").max(15, \"maximum length is 15 characters!\"),\n  firstName: yup.string().required(\"Enter First name!\").min(3, \"Minimum length is 3 characters!\").max(15, \"maximum length is 15 characters!\"),\n  lastName: yup.string().required(\"Enter last name!\").min(3, \"Minimum length is 3 characters!\").max(15, \"maximum length is 15 characters!\"),\n  email: yup.string().required(\"Enter Email!\").email(\"Incorrect email format\")\n});\nconst useStyles = makeStyles(theme => ({\n  form: {\n    width: '100%' // Fix IE 11 issue.\n\n  }\n}));\nexport const EditUserForm = props => {\n  _s();\n\n  const classes = useStyles();\n  const methods = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const {\n    handleSubmit,\n    errors\n  } = methods;\n  const [isLoading, setIsLoading] = useState(true);\n  const [updateError, setUpdateError] = useState(\"\");\n  const [result, setResult] = useState({\n    successed: false,\n    description: \"\"\n  });\n  useEffect(() => {\n    GetResult(props.userId).then(res => {\n      setResult(res);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const onSubmit = formValues => {\n    formValues.id = Number(formValues.id);\n    UpdateAccount(formValues).then(res => {\n      if (res.response.status == 200) {\n        setUpdateError(\"\");\n        props.handleClose();\n      } else {\n        setUpdateError(res.data);\n      }\n    }).catch(error => {\n      console.log(error);\n      setUpdateError(\"Something went wrong. Server may be down\");\n    });\n  };\n\n  const GetResult = async userId => {\n    return GetUserById(userId).then(result => {\n      if (result.status == 200) {\n        return {\n          purse: result.data,\n          successed: true,\n          description: \"Successed\"\n        };\n      }\n\n      if (result.status == 404) {\n        return {\n          successed: false,\n          description: \"User has already deleted\",\n          purse: undefined\n        };\n      }\n\n      return {\n        successed: false,\n        description: \"You do not have access to this user\",\n        purse: undefined\n      };\n    }).catch(error => {\n      console.log(error);\n      return {\n        successed: false,\n        description: \"Something went wrong\",\n        purse: undefined\n      };\n    });\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"scroll-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justify: \"center\",\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: props.handleClose,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!result.successed || result.user == undefined) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"scroll-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justify: \"center\",\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Error!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: [result.description, \" \", result.user == undefined && \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\",\n              fontWeight: 400,\n              fontSize: 16\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: updateError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: props.handleClose,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"scroll-dialog-title\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justify: \"center\",\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Edit user \", result.user.userName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        dividers: true,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          className: classes.form,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 7,\n              children: /*#__PURE__*/_jsxDEV(InputForm, {\n                errorObj: errors,\n                name: \"id\",\n                type: \"number\",\n                label: \"Id\",\n                required: true,\n                variant: \"outlined\",\n                disabled: true,\n                defaultValue: props.userId.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(InputForm, {\n                errorObj: errors,\n                name: \"userName\",\n                type: \"text\",\n                label: \"UserName\",\n                required: true,\n                variant: \"outlined\",\n                defaultValue: result.user.userName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(InputForm, {\n                errorObj: errors,\n                name: \"email\",\n                type: \"text\",\n                label: \"Email\",\n                required: true,\n                variant: \"outlined\",\n                defaultValue: result.user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(InputForm, {\n                errorObj: errors,\n                name: \"firstName\",\n                type: \"text\",\n                label: \"First Name\",\n                required: true,\n                variant: \"outlined\",\n                defaultValue: result.user.firstName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(InputForm, {\n                errorObj: errors,\n                name: \"lastName\",\n                type: \"text\",\n                label: \"Last Name\",\n                required: true,\n                variant: \"outlined\",\n                defaultValue: result.user.lastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: props.handleClose,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditUserForm, \"9n/hbdAeaP9T9tDCA2GvCdg8ts8=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = EditUserForm;\nexport default EditUserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUserForm\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Forms/AdminForms/EditUserForm.tsx"],"names":["React","useEffect","useState","useForm","FormProvider","Button","DialogTitle","DialogContent","DialogContentText","DialogActions","makeStyles","Grid","Typography","CircularProgress","InputForm","yup","yupResolver","GetUserById","UpdateAccount","validationSchema","object","shape","id","string","required","userName","min","max","firstName","lastName","email","useStyles","theme","form","width","EditUserForm","props","classes","methods","resolver","handleSubmit","errors","isLoading","setIsLoading","updateError","setUpdateError","result","setResult","successed","description","GetResult","userId","then","res","onSubmit","formValues","Number","response","status","handleClose","data","catch","error","console","log","purse","undefined","user","color","fontWeight","fontSize","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport { Button, DialogTitle, DialogContent, \r\n    DialogContentText, DialogActions, makeStyles, \r\n    Grid, Typography, CircularProgress } from \"@material-ui/core\";\r\nimport InputForm from '../InputForm/InputForm';\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport User from \"../../../Data/Models/User/User\";\r\nimport { GetUserById, UpdateAccount } from \"../../../Services/user.services/User.service\";\r\nimport UserForUpdateAccount from \"../../../Data/Models/User/UserForUpdateAccount\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n    id: yup.string().required(\"Enter id!\"),\r\n    userName: yup.string().required(\"Enter UserName!\").min(3, \"Minimum length is 3 characters!\")\r\n        .max(15, \"maximum length is 15 characters!\"),\r\n    firstName: yup.string().required(\"Enter First name!\").min(3, \"Minimum length is 3 characters!\")\r\n        .max(15, \"maximum length is 15 characters!\"),\r\n    lastName: yup.string().required(\"Enter last name!\").min(3, \"Minimum length is 3 characters!\")\r\n        .max(15, \"maximum length is 15 characters!\"),\r\n    email: yup.string().required(\"Enter Email!\").email(\"Incorrect email format\")\r\n  });\r\n\r\ninterface EditUserFormProps\r\n{\r\n    handleClose: () => void;\r\n    userId: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n    }\r\n}));\r\n\r\nexport const EditUserForm: React.FC<EditUserFormProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const methods = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const { handleSubmit, errors } = methods;\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [updateError, setUpdateError] = useState(\"\");\r\n    const [result, setResult] = useState<{\r\n        user?: User,\r\n        successed: boolean,\r\n        description: string\r\n    }>({successed: false, description: \"\"});\r\n\r\n    useEffect(() => {\r\n        GetResult(props.userId)\r\n            .then(res => {\r\n                setResult(res);\r\n                setIsLoading(false);\r\n            })\r\n    }, []);\r\n\r\n    const onSubmit = (formValues: UserForUpdateAccount) => {\r\n\r\n        formValues.id = Number(formValues.id);\r\n        \r\n        UpdateAccount(formValues)\r\n            .then(res => {\r\n                if(res.response.status == 200)\r\n                {\r\n                    setUpdateError(\"\");\r\n                    props.handleClose();\r\n                }\r\n                else\r\n                {\r\n                    setUpdateError(res.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n               console.log(error);\r\n               setUpdateError(\"Something went wrong. Server may be down\"); \r\n            });\r\n      }\r\n\r\n    const GetResult = async (userId: number) => {\r\n        return GetUserById(userId)\r\n            .then(result => {\r\n                if(result.status == 200)\r\n                {\r\n                    return{\r\n                        purse: result.data,\r\n                        successed: true,\r\n                        description: \"Successed\"\r\n                    }\r\n                }\r\n                if(result.status == 404)\r\n                {\r\n                    return{\r\n                        successed: false,\r\n                        description: \"User has already deleted\",\r\n                        purse: undefined\r\n                    };\r\n                }\r\n                return{\r\n                    successed: false,\r\n                    description: \"You do not have access to this user\",\r\n                    purse: undefined\r\n                };\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n\r\n                return{\r\n                    successed: false,\r\n                    description: \"Something went wrong\",\r\n                    purse: undefined\r\n                };\r\n            })\r\n      }\r\n\r\n      if(isLoading)\r\n      {\r\n        return (\r\n            <React.Fragment>\r\n                <DialogTitle id=\"scroll-dialog-title\">\r\n                    <Grid container justify=\"center\" xs={12}>\r\n                    <CircularProgress color=\"secondary\" />\r\n                    </Grid>\r\n                </DialogTitle>\r\n                <DialogContent dividers={true}>\r\n                    <DialogContentText>\r\n                        <CircularProgress color=\"secondary\" />\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                        onClick={props.handleClose}\r\n                        >\r\n                        <Typography>\r\n                            Close\r\n                        </Typography>\r\n                    </Button>\r\n                </DialogActions>\r\n            </React.Fragment>\r\n        );\r\n      }\r\n\r\n    if(!result.successed || result.user == undefined)\r\n    {\r\n        return(\r\n            <React.Fragment>\r\n                <DialogTitle id=\"scroll-dialog-title\">\r\n                    <Grid container justify=\"center\" xs={12}>\r\n                        <Typography variant=\"h6\">Error!</Typography>\r\n                    </Grid>\r\n                </DialogTitle>\r\n                <DialogContent dividers={true}>\r\n                    <DialogContentText>\r\n                        <Typography>\r\n                            {result.description} {result.user == undefined && \"\"}\r\n                        </Typography>\r\n                        <p style={{color:\"red\", fontWeight:400, fontSize:16}}>\r\n                            <Typography>\r\n                                {updateError}\r\n                            </Typography>\r\n                        </p>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                        onClick={props.handleClose}\r\n                        >\r\n                        <Typography>\r\n                            Close\r\n                        </Typography>\r\n                    </Button>\r\n                </DialogActions>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <FormProvider {...methods}>\r\n                <DialogTitle id=\"scroll-dialog-title\">\r\n                    <Grid container justify=\"center\" xs={12}>\r\n                        <Typography variant=\"h6\">\r\n                            Edit user {result.user.userName}\r\n                        </Typography>\r\n                    </Grid>\r\n                </DialogTitle>\r\n                <DialogContent dividers={true}>\r\n                    <form noValidate className={classes.form}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={7}>\r\n                                <InputForm \r\n                                errorObj={errors}\r\n                                name=\"id\" \r\n                                type=\"number\"\r\n                                label=\"Id\"\r\n                                required\r\n                                variant=\"outlined\"\r\n                                disabled\r\n                                defaultValue={props.userId.toString()}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputForm \r\n                                errorObj={errors}\r\n                                name=\"userName\" \r\n                                type=\"text\"\r\n                                label=\"UserName\"\r\n                                required\r\n                                variant=\"outlined\"\r\n                                defaultValue={result.user.userName}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputForm \r\n                                errorObj={errors}\r\n                                name=\"email\" \r\n                                type=\"text\"\r\n                                label=\"Email\"\r\n                                required\r\n                                variant=\"outlined\"\r\n                                defaultValue={result.user.email}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputForm \r\n                                errorObj={errors}\r\n                                name=\"firstName\" \r\n                                type=\"text\"\r\n                                label=\"First Name\"\r\n                                required\r\n                                variant=\"outlined\"\r\n                                defaultValue={result.user.firstName}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <InputForm \r\n                                errorObj={errors}\r\n                                name=\"lastName\" \r\n                                type=\"text\"\r\n                                label=\"Last Name\"\r\n                                required\r\n                                variant=\"outlined\"\r\n                                defaultValue={result.user.lastName}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        color=\"secondary\"\r\n                        onClick={handleSubmit(onSubmit)}\r\n                        >\r\n                        <Typography>\r\n                            Save\r\n                        </Typography>\r\n                    </Button>\r\n                        <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                        onClick={props.handleClose}\r\n                        >\r\n                        <Typography>\r\n                            Close\r\n                        </Typography>\r\n                    </Button>\r\n                </DialogActions>\r\n            </FormProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default EditUserForm;"]},"metadata":{},"sourceType":"module"}