{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\ExpensesPerDaysDiagram.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport CountDays from '../../Date/CountDays';\nimport BarDiagram from './Generic/BarDiagram';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\n\nconst randomColor = require('random-color');\n\nexport const ExpensesPerDaysDiagram = props => {\n  _s();\n\n  const [expenses] = useSessionStorage('expensesPerDays', []);\n\n  if (props.isLoading) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      xs: 12,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n  const getData = () => {\n    let datasets = [];\n\n    for (const expense of expenses) {\n      let color = randomColor(0.99, 0.99);\n      let color2 = randomColor(0.99, 0.99);\n      let sums = [];\n      expense.expensesPerDay.forEach(e => {\n        sums.push(e.sum);\n      });\n      datasets.push({\n        label: expense.currencyCode.toUpperCase(),\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        borderWidth: 1,\n        hoverBackgroundColor: color2.rgbString(),\n        hoverBorderColor: color2.rgbString(),\n        data: sums\n      });\n    }\n\n    const data = {\n      labels: Array.from({\n        length: CountDays()\n      }, (_, i) => i + 1),\n      datasets: datasets\n    };\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(BarDiagram, {\n    data: getData(),\n    title: {\n      display: true,\n      text: \"Expenses for current month\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: \"right\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesPerDaysDiagram, \"q3Jqh7JrdcGxI8I6FyNkTtwzgJI=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = ExpensesPerDaysDiagram;\nexport default ExpensesPerDaysDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesPerDaysDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/ExpensesPerDaysDiagram.tsx"],"names":["React","CountDays","BarDiagram","CircularProgress","Grid","useSessionStorage","randomColor","require","ExpensesPerDaysDiagram","props","expenses","isLoading","getData","datasets","expense","color","color2","sums","expensesPerDay","forEach","e","push","sum","label","currencyCode","toUpperCase","backgroundColor","rgbString","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","labels","Array","from","length","_","i","display","text","fontSize","position"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA,SAASC,gBAAT,EAA2BC,IAA3B,QAAuC,mBAAvC;AACA,OAAOC,iBAAP,MAA8B,kDAA9B;;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAOA,OAAO,MAAMC,sBAA6D,GAAIC,KAAD,IAAW;AAAA;;AAEpF,QAAM,CAACC,QAAD,IAAaL,iBAAiB,CAAwB,iBAAxB,EAA2C,EAA3C,CAApC;;AAEA,MAAGI,KAAK,CAACE,SAAT,EACA;AACI,wBACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,EAAE,EAAE,EAApB;AAAwB,MAAA,OAAO,EAAC,QAAhC;AAAA,6BACI,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAED,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIC,QAAe,GAAG,EAAtB;;AAEA,SAAI,MAAMC,OAAV,IAAqBJ,QAArB,EACA;AACI,UAAIK,KAAK,GAAGT,WAAW,CAAC,IAAD,EAAO,IAAP,CAAvB;AACA,UAAIU,MAAM,GAAGV,WAAW,CAAC,IAAD,EAAO,IAAP,CAAxB;AAEA,UAAIW,IAAc,GAAG,EAArB;AAEAH,MAAAA,OAAO,CAACI,cAAR,CAAuBC,OAAvB,CAA+BC,CAAC,IAAI;AAChCH,QAAAA,IAAI,CAACI,IAAL,CAAUD,CAAC,CAACE,GAAZ;AACH,OAFD;AAIAT,MAAAA,QAAQ,CAACQ,IAAT,CACI;AACIE,QAAAA,KAAK,EAAET,OAAO,CAACU,YAAR,CAAqBC,WAArB,EADX;AAEIC,QAAAA,eAAe,EAAEX,KAAK,CAACY,SAAN,EAFrB;AAGIC,QAAAA,WAAW,EAAEb,KAAK,CAACY,SAAN,EAHjB;AAIIE,QAAAA,WAAW,EAAE,CAJjB;AAKIC,QAAAA,oBAAoB,EAAEd,MAAM,CAACW,SAAP,EAL1B;AAMII,QAAAA,gBAAgB,EAAEf,MAAM,CAACW,SAAP,EANtB;AAOIK,QAAAA,IAAI,EAAEf;AAPV,OADJ;AAWH;;AAED,UAAMe,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEC,KAAK,CAACC,IAAN,CAAW;AAACC,QAAAA,MAAM,EAAEnC,SAAS;AAAlB,OAAX,EAAkC,CAACoC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAhD,CADC;AAETzB,MAAAA,QAAQ,EAAEA;AAFD,KAAb;AAKA,WAAOmB,IAAP;AACH,GAjCD;;AAqCA,sBACI,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEpB,OAAO,EAAzB;AAA6B,IAAA,KAAK,EAAE;AAChC2B,MAAAA,OAAO,EAAE,IADuB;AAEhCC,MAAAA,IAAI,EAAE,4BAF0B;AAGhCC,MAAAA,QAAQ,EAAE;AAHsB,KAApC;AAIG,IAAA,MAAM,EAAE;AACPF,MAAAA,OAAO,EAAE,IADF;AAEPG,MAAAA,QAAQ,EAAE;AAFH;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA5DM;;GAAMlC,sB;UAEUH,iB;;;KAFVG,sB;AA8Db,eAAeA,sBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PurseExpensesPerDay from '../../Data/Models/Expenses/PurseExpensesPerDay';\r\nimport CountDays from '../../Date/CountDays';\r\nimport BarDiagram from './Generic/BarDiagram';\r\nimport { GetExpensesPerDayForCurrentMonth } from '../../Services/expense.service/ExpenseService';\r\nimport { CircularProgress, Grid } from '@material-ui/core';\r\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\r\n\r\nconst randomColor = require('random-color');\r\n\r\ninterface ExpensesPerDaysDiagramProps\r\n{\r\n    isLoading: boolean\r\n}\r\n\r\nexport const ExpensesPerDaysDiagram: React.FC<ExpensesPerDaysDiagramProps> = (props) => {\r\n\r\n    const [expenses] = useSessionStorage<PurseExpensesPerDay[]>('expensesPerDays', []);\r\n\r\n    if(props.isLoading)\r\n    {\r\n        return(\r\n            <Grid container xs={12} justify=\"center\">\r\n                <CircularProgress color=\"secondary\" />\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    const getData = () => {\r\n        let datasets: any[] = [];\r\n        \r\n        for(const expense of expenses)\r\n        {\r\n            let color = randomColor(0.99, 0.99);\r\n            let color2 = randomColor(0.99, 0.99);\r\n            \r\n            let sums: number[] = [];\r\n            \r\n            expense.expensesPerDay.forEach(e => {\r\n                sums.push(e.sum);\r\n            });\r\n\r\n            datasets.push(\r\n                {\r\n                    label: expense.currencyCode.toUpperCase(),\r\n                    backgroundColor: color.rgbString(),\r\n                    borderColor: color.rgbString(),\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: color2.rgbString(),\r\n                    hoverBorderColor: color2.rgbString(),\r\n                    data: sums\r\n                }\r\n            );\r\n        }\r\n\r\n        const data = {\r\n            labels: Array.from({length: CountDays()}, (_, i) => i + 1),\r\n            datasets: datasets\r\n        };\r\n\r\n        return data;\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <BarDiagram data={getData()} title={{\r\n            display: true,\r\n            text: \"Expenses for current month\",\r\n            fontSize: 20\r\n        }} legend={{\r\n            display: true,\r\n            position: \"right\"\r\n        }} />\r\n    );\r\n}\r\n\r\nexport default ExpensesPerDaysDiagram;"]},"metadata":{},"sourceType":"module"}