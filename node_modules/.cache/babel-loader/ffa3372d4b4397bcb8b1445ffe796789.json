{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useSessionStorageAsync = (key, fn) => {\n  _s();\n\n  useEffect(async () => {\n    const itemStr = sessionStorage.getItem(key);\n\n    if (itemStr) {\n      setValue(JSON.parse(itemStr));\n    } else {// fn().then(result => setValue(result))\n      //     .catch(error => {\n      //         console.log(\"Error happens in useSessionStorageAsync hook, block 'useEffect'\");\n      //         console.log(error);\n      //     });\n      // const item = await fn();\n    }\n  });\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorageAsync hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorageAsync, \"wQ7ANgJ8MfuBNk7OhmNPf7ARUXs=\");\n\nexport default useSessionStorageAsync;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/AsyncHooks/useSessionStorageAsync.tsx"],"names":["useEffect","useState","useSessionStorageAsync","key","fn","itemStr","sessionStorage","getItem","setValue","JSON","parse","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","error","console","log","removeValue","item","removeItem"],"mappings":";;AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;;AAEA,MAAMC,sBAAsB,GAAG,CAAoBC,GAApB,EAAiCC,EAAjC,KAA0D;AAAA;;AAErFJ,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMK,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuBJ,GAAvB,CAAhB;;AACA,QAAGE,OAAH,EACA;AACIG,MAAAA,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAD,CAAR;AACH,KAHD,MAKA,CACI;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,GAfQ,CAAT;AAiBA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,EAA9C;;AAEA,QAAMO,QAAQ,GAAIK,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACF,WAAD,CADY,GACIE,KADzB;AAGAD,MAAAA,cAAc,CAACE,YAAD,CAAd;AACAR,MAAAA,cAAc,CAACU,OAAf,CAAuBb,GAAvB,EAA4BM,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAA5B;AACH,KAPD,CAQA,OAAMI,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,gEAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMG,WAAW,GAAG,MAAM;AACtB,UAAMC,IAAI,GAAGhB,cAAc,CAACC,OAAf,CAAuBJ,GAAvB,CAAb;;AACA,QAAGmB,IAAI,IAAI,IAAX,EACA;AACIhB,MAAAA,cAAc,CAACiB,UAAf,CAA0BpB,GAA1B;AACH;AACJ,GAND;;AAQA,SAAO,CAACQ,WAAD,EAAcH,QAAd,EAAwBa,WAAxB,CAAP;AACH,CA9CD;;GAAMnB,sB;;AAgDN,eAAeA,sBAAf","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nconst useSessionStorageAsync = <T extends unknown>(key: string, fn: () => Promise<T>) => {\r\n\r\n    useEffect(async () => {\r\n        const itemStr = sessionStorage.getItem(key);\r\n        if(itemStr)\r\n        {\r\n            setValue(JSON.parse(itemStr) as T);\r\n        }\r\n        else\r\n        {\r\n            // fn().then(result => setValue(result))\r\n            //     .catch(error => {\r\n            //         console.log(\"Error happens in useSessionStorageAsync hook, block 'useEffect'\");\r\n            //         console.log(error);\r\n            //     });\r\n            // const item = await fn();\r\n        }\r\n    })\r\n\r\n    const [storedValue, setStoredValue] = useState<T>() as [T, Dispatch<SetStateAction<T>>];\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorageAsync hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorageAsync;"]},"metadata":{},"sourceType":"module"}