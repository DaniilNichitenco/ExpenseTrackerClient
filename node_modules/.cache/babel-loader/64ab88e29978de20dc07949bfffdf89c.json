{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useSessionStorage = (key, initialValue, check = false) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = sessionStorage.getItem(key);\n\n      if (item != null && item != \"undefined\") {\n        return JSON.parse(item);\n      }\n\n      return initialValue;\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  useEffect(() => {\n    if (check) {\n      setInterval(() => {\n        const itemStr = sessionStorage.getItem(key);\n\n        if (itemStr != null) {\n          try {\n            const item = JSON.parse(itemStr);\n\n            if (item != storedValue) {\n              console.log(itemStr);\n              console.log(JSON.stringify(storedValue));\n              setStoredValue(item);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }, 5000);\n    }\n  }, []);\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorage, \"5Q8F1AxW2kSZzV1MWhRgP5ZYCSg=\");\n\nexport default useSessionStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useSessionStorage.tsx"],"names":["useEffect","useState","useSessionStorage","key","initialValue","check","storedValue","setStoredValue","item","sessionStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem","setInterval","itemStr"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAAoBC,GAApB,EAAiCC,YAAjC,EAAiDC,KAAK,GAAG,KAAzD,KAAmE;AAAA;;AAEzF,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAI,MAAM;AACpD,QACA;AACI,YAAMO,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBP,GAAvB,CAAb;;AACA,UAAGK,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,WAA3B,EACA;AACI,eAAOG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACH;;AACD,aAAOJ,YAAP;AACH,KARD,CASA,OAAMS,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOT,YAAP;AACH;AACJ,GAhB6C,CAA9C;;AAkBA,QAAMY,QAAQ,GAAIC,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACX,WAAD,CADY,GACIW,KADzB;AAGAV,MAAAA,cAAc,CAACW,YAAD,CAAd;AACAT,MAAAA,cAAc,CAACW,OAAf,CAAuBjB,GAAvB,EAA4BQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAA5B;AACH,KAPD,CAQA,OAAML,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMS,WAAW,GAAG,MAAM;AACtB,UAAMd,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBP,GAAvB,CAAb;;AACA,QAAGK,IAAI,IAAI,IAAX,EACA;AACIC,MAAAA,cAAc,CAACc,UAAf,CAA0BpB,GAA1B;AACH;AACJ,GAND;;AAQAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,KAAH,EACA;AACImB,MAAAA,WAAW,CAAC,MAAM;AACd,cAAMC,OAAO,GAAGhB,cAAc,CAACC,OAAf,CAAuBP,GAAvB,CAAhB;;AACA,YAAGsB,OAAO,IAAI,IAAd,EACA;AACI,cACA;AACI,kBAAMjB,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWa,OAAX,CAAb;;AACA,gBAAGjB,IAAI,IAAIF,WAAX,EACA;AACIQ,cAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AACAX,cAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACU,SAAL,CAAef,WAAf,CAAZ;AACAC,cAAAA,cAAc,CAACC,IAAD,CAAd;AACH;AACJ,WATD,CAUA,OAAMK,KAAN,EACA;AACIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AACJ,OAnBU,EAmBR,IAnBQ,CAAX;AAoBH;AACJ,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO,CAACP,WAAD,EAAcU,QAAd,EAAwBM,WAAxB,CAAP;AACH,CAvED;;GAAMpB,iB;;AAyEN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useSessionStorage = <T extends unknown>(key: string, initialValue:T, check = false) => {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try\r\n        {\r\n            const item = sessionStorage.getItem(key);\r\n            if(item != null && item != \"undefined\")\r\n            {\r\n                return JSON.parse(item);\r\n            }\r\n            return initialValue;\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\r\n            console.log(error);\r\n            return initialValue;\r\n        }   \r\n    });\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(check)\r\n        {\r\n            setInterval(() => {\r\n                const itemStr = sessionStorage.getItem(key);\r\n                if(itemStr != null)\r\n                {\r\n                    try\r\n                    {\r\n                        const item = JSON.parse(itemStr) as T;\r\n                        if(item != storedValue)\r\n                        {\r\n                            console.log(itemStr);\r\n                            console.log(JSON.stringify(storedValue));\r\n                            setStoredValue(item);\r\n                        }\r\n                    }\r\n                    catch(error : any)\r\n                    {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            }, 5000);\r\n        }\r\n    }, []);\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorage;"]},"metadata":{},"sourceType":"module"}