{"ast":null,"code":"import API from '../Api';\nexport const getCurrentUserData = async () => {\n  return API.get(\"/user/current\").then(response => {\n    let user = response.data;\n    console.log(\"GetCurrUser:\" + response);\n    let result = {\n      data: user,\n      status: response.status\n    };\n    return result;\n  }).catch(error => {\n    console.log(error);\n    let result = {\n      data: error.response.data,\n      status: error.response.status\n    };\n    return result;\n  });\n};\nexport const getUserById = async id => {\n  return API.get(\"/user/\" + id).then(response => {\n    let user = response.data;\n    let result = {\n      data: user,\n      status: response.status\n    };\n    return result;\n  }).catch(error => {\n    console.log(error);\n    let result = {\n      data: error.response.data,\n      status: error.response.status\n    };\n    return result;\n  });\n};\nexport const getPagedUsers = async request => {\n  if (request.requestFilters == undefined) {\n    request.requestFilters = {\n      filters: [],\n      logicalOperators: 0\n    };\n  }\n\n  if (request.columnNameForSorting == undefined) {\n    request.columnNameForSorting = \"Id\";\n    request.sortDirection = \"ASC\";\n  }\n\n  if (request.sortDirection == undefined) {\n    request.sortDirection = \"ASC\";\n  }\n\n  return API.post(\"User/PaginatedSearch\", request).then(response => {\n    let result = response.data;\n    return {\n      response: response,\n      data: result\n    };\n  }).catch(error => {\n    console.log(error);\n    return {\n      response: error.response,\n      data: error.response.data\n    };\n  });\n};\nexport const editUser = async userForUpdate => {\n  return API.put('/user/', userForUpdate).then(response => {\n    return {\n      response: response\n    };\n  }).catch(error => {\n    console.log(error);\n    return {\n      response: error.response\n    };\n  });\n};\nexport const editUserById = async (userForUpdate, userId) => {\n  return await API.put('/user/' + userId, userForUpdate).catch(error => {\n    console.log(error);\n  });\n};\nexport const updateAccount = async user => {\n  return API.post(\"/Account\", user).then(response => {\n    return {\n      response: response,\n      data: response.data.message\n    };\n  }).catch(error => {\n    return {\n      response: error.response,\n      data: error.response.data.message\n    };\n  });\n};\nexport const deleteAccount = async () => await API.delete(\"/account\");\nexport const deleteAccountById = async id => await API.delete(\"/account/\" + id);\nexport default {\n  getCurrentUserData,\n  editUser,\n  editUserById,\n  deleteAccount,\n  deleteAccountById,\n  getUserById,\n  updateAccount,\n  getPagedUsers\n};","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Services/user.services/User.service.ts"],"names":["API","getCurrentUserData","get","then","response","user","data","console","log","result","status","catch","error","getUserById","id","getPagedUsers","request","requestFilters","undefined","filters","logicalOperators","columnNameForSorting","sortDirection","post","editUser","userForUpdate","put","editUserById","userId","updateAccount","message","deleteAccount","delete","deleteAccountById"],"mappings":"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","sourcesContent":["import User from '../../Data/Models/User/User';\r\nimport UserForUpdate from '../../Data/Models/User/UserForUpdate';\r\nimport UserForUpdateAccount from '../../Data/Models/User/UserForUpdateAccount';\r\nimport API from '../Api';\r\nimport PagedRequest from '../pagedRequests/PagedRequest';\r\nimport PagedResult from '../pagedRequests/PagedResult';\r\n\r\nexport const getCurrentUserData = async () => {\r\n\r\n    return API.get(\"/user/current\")\r\n        .then(response => {\r\n            let user: User = response.data;\r\n            console.log(\"GetCurrUser:\" + response);\r\n            let result = {\r\n                data: user,\r\n                status: response.status\r\n            };\r\n\r\n            return result;\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            let result = {\r\n                data: error.response.data,\r\n                status: error.response.status\r\n            };\r\n\r\n            return result;\r\n        });\r\n\r\n}\r\n\r\nexport const getUserById = async (id: number) => {\r\n\r\n    return API.get(\"/user/\" + id)\r\n        .then(response => {\r\n            let user: User = response.data;\r\n            let result = {\r\n                data: user,\r\n                status: response.status\r\n            };\r\n\r\n            return result;\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            let result = {\r\n                data: error.response.data,\r\n                status: error.response.status\r\n            };\r\n\r\n            return result;\r\n        });\r\n\r\n}\r\n\r\nexport const getPagedUsers = async (request: PagedRequest) => {\r\n\r\n    if(request.requestFilters == undefined)\r\n    {\r\n        request.requestFilters = {\r\n            filters: [],\r\n            logicalOperators: 0\r\n        }\r\n    }\r\n    if(request.columnNameForSorting == undefined)\r\n    {\r\n        request.columnNameForSorting = \"Id\";\r\n        request.sortDirection = \"ASC\";\r\n    }\r\n    if(request.sortDirection == undefined)\r\n    {\r\n        request.sortDirection = \"ASC\";\r\n    }\r\n    \r\n    return API.post(\"User/PaginatedSearch\", request)\r\n        .then(response => {\r\n            let result: PagedResult<User> = response.data;\r\n\r\n            return {\r\n                response: response,\r\n                data: result\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n\r\n            return {\r\n                response:error.response,\r\n                data: error.response.data\r\n            };\r\n        });\r\n}\r\n\r\nexport const editUser = async (userForUpdate: UserForUpdate) => {\r\n\r\n    return API.put('/user/', userForUpdate)\r\n        .then(response => {\r\n            return {response: response}\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            return {response: error.response};\r\n        });\r\n}\r\n\r\nexport const editUserById = async (userForUpdate: UserForUpdate, userId: number) => {\r\n\r\n    return await API.put('/user/' + userId, userForUpdate)\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n}\r\n\r\nexport const updateAccount = async (user: UserForUpdateAccount) => {\r\n    return API.post(\"/Account\", user)\r\n        .then(response => {\r\n            \r\n            return {\r\n                response: response,\r\n                data: response.data.message\r\n            }\r\n        })\r\n        .catch(error => {\r\n            \r\n            return {\r\n                response: error.response,\r\n                data: error.response.data.message\r\n            }\r\n        });\r\n}\r\n\r\nexport const deleteAccount = async () => await API.delete(\"/account\");\r\n\r\nexport const deleteAccountById = async (id: number) => await API.delete(\"/account/\" + id);\r\n\r\nexport default {\r\n    getCurrentUserData,\r\n    editUser,\r\n    editUserById,\r\n    deleteAccount,\r\n    deleteAccountById,\r\n    getUserById,\r\n    updateAccount,\r\n    getPagedUsers\r\n}"]},"metadata":{},"sourceType":"module"}