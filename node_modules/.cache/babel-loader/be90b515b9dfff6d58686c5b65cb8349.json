{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useSessionStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = sessionStorage.getItem(key);\n\n      if (item != null && item != \"undefined\") {\n        return JSON.parse(item);\n      }\n\n      return initialValue;\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  useEffect(() => {\n    setInterval(() => {\n      const itemStr = sessionStorage.getItem(key);\n\n      if (itemStr != null) {\n        const item = JSON.parse(itemStr);\n        console.log(typeof item + \" - \");\n\n        if (item != storedValue && typeof item == typeof initialValue) {\n          console.log(\"s \" + typeof item);\n          setStoredValue(item);\n        }\n      }\n    }, 5000);\n  }, []);\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorage, \"5Q8F1AxW2kSZzV1MWhRgP5ZYCSg=\");\n\nexport default useSessionStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useSessionStorage.tsx"],"names":["useEffect","useState","useSessionStorage","key","initialValue","storedValue","setStoredValue","item","sessionStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem","setInterval","itemStr"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAAoBC,GAApB,EAAiCC,YAAjC,KAAoD;AAAA;;AAE1E,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAI,MAAM;AACpD,QACA;AACI,YAAMM,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBN,GAAvB,CAAb;;AACA,UAAGI,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,WAA3B,EACA;AACI,eAAOG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAP;AACH;;AACD,aAAOH,YAAP;AACH,KARD,CASA,OAAMQ,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOR,YAAP;AACH;AACJ,GAhB6C,CAA9C;;AAkBA,QAAMW,QAAQ,GAAIC,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACX,WAAD,CADY,GACIW,KADzB;AAGAV,MAAAA,cAAc,CAACW,YAAD,CAAd;AACAT,MAAAA,cAAc,CAACW,OAAf,CAAuBhB,GAAvB,EAA4BO,IAAI,CAACU,SAAL,CAAeH,YAAf,CAA5B;AACH,KAPD,CAQA,OAAML,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMS,WAAW,GAAG,MAAM;AACtB,UAAMd,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBN,GAAvB,CAAb;;AACA,QAAGI,IAAI,IAAI,IAAX,EACA;AACIC,MAAAA,cAAc,CAACc,UAAf,CAA0BnB,GAA1B;AACH;AACJ,GAND;;AAQAH,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,WAAW,CAAC,MAAM;AACd,YAAMC,OAAO,GAAGhB,cAAc,CAACC,OAAf,CAAuBN,GAAvB,CAAhB;;AACA,UAAGqB,OAAO,IAAI,IAAd,EACA;AACI,cAAMjB,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWa,OAAX,CAAb;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAOP,IAAP,GAAc,KAA1B;;AACA,YAAGA,IAAI,IAAIF,WAAR,IAAuB,OAAOE,IAAP,IAAe,OAAOH,YAAhD,EACA;AACIS,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAM,OAAOP,IAAzB;AACAD,UAAAA,cAAc,CAACC,IAAD,CAAd;AACH;AACJ;AACJ,KAZU,EAYR,IAZQ,CAAX;AAaH,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAO,CAACF,WAAD,EAAcU,QAAd,EAAwBM,WAAxB,CAAP;AACH,CA7DD;;GAAMnB,iB;;AA+DN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useSessionStorage = <T extends unknown>(key: string, initialValue:T) => {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try\r\n        {\r\n            const item = sessionStorage.getItem(key);\r\n            if(item != null && item != \"undefined\")\r\n            {\r\n                return JSON.parse(item);\r\n            }\r\n            return initialValue;\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\r\n            console.log(error);\r\n            return initialValue;\r\n        }   \r\n    });\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            const itemStr = sessionStorage.getItem(key);\r\n            if(itemStr != null)\r\n            {\r\n                const item = JSON.parse(itemStr);\r\n                console.log(typeof item + \" - \");\r\n                if(item != storedValue && typeof item == typeof initialValue)\r\n                {\r\n                    console.log(\"s \" +typeof item);\r\n                    setStoredValue(item);\r\n                }\r\n            }\r\n        }, 5000);\r\n    }, []);\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorage;"]},"metadata":{},"sourceType":"module"}