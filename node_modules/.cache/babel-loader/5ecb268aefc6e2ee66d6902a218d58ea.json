{"ast":null,"code":"var _s = $RefreshSig$();\n\nconst useSessionStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useCustomState();\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = localStorage.getItem(key);\n\n    if (item != null) {\n      localStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorage, \"KFleqI9awd3uCnG+Qd+Gx1RrU5U=\", true);\n\nexport default useSessionStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useSessionStorage.tsx"],"names":["useSessionStorage","key","initialValue","storedValue","setStoredValue","useCustomState","setValue","value","valueToStore","Function","localStorage","setItem","JSON","stringify","error","console","log","removeValue","item","getItem","removeItem"],"mappings":";;AAEA,MAAMA,iBAAiB,GAAG,CAAoBC,GAApB,EAAiCC,YAAjC,KAAoD;AAAA;;AAI1E,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,cAAc,EAApD;;AAEA,QAAMC,QAAQ,GAAIC,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACJ,WAAD,CADY,GACII,KADzB;AAGAH,MAAAA,cAAc,CAACI,YAAD,CAAd;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0BW,IAAI,CAACC,SAAL,CAAeL,YAAf,CAA1B;AACH,KAPD,CAQA,OAAMM,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMG,WAAW,GAAG,MAAM;AACtB,UAAMC,IAAI,GAAGR,YAAY,CAACS,OAAb,CAAqBlB,GAArB,CAAb;;AACA,QAAGiB,IAAI,IAAI,IAAX,EACA;AACIR,MAAAA,YAAY,CAACU,UAAb,CAAwBnB,GAAxB;AACH;AACJ,GAND;;AAQA,SAAO,CAACE,WAAD,EAAcG,QAAd,EAAwBW,WAAxB,CAAP;AACH,CA/BD;;GAAMjB,iB;;AAiCN,eAAeA,iBAAf","sourcesContent":["import { Dispatch, SetStateAction, useState } from \"react\";\r\n\r\nconst useSessionStorage = <T extends unknown>(key: string, initialValue:T) => {\r\n    \r\n\r\n\r\n    const [storedValue, setStoredValue] = useCustomState();\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = localStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorage;"]},"metadata":{},"sourceType":"module"}