{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\ExpensesPerDaysDiagram.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport CountDays from '../../Date/CountDays';\nimport BarDiagram from './Generic/BarDiagram';\nimport { GetExpensesPerDayForCurrentMonth } from '../../Services/expense.service/ExpenseService';\nimport { CircularProgress, Grid } from '@material-ui/core';\n\nconst randomColor = require('random-color');\n\nconst data = {\n  labels: Array.from({\n    length: CountDays()\n  }, (_, i) => i + 1),\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(255,99,132,0.2)',\n    borderColor: 'rgba(255,99,132,1)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n    hoverBorderColor: 'rgba(255,99,132,1)',\n    data: [65, 59, 80, 81, 56, 55, 40]\n  }, {\n    label: 'My second dataset',\n    backgroundColor: 'rgba(215,19,102,0.2)',\n    borderColor: 'rgba(215,19,102,1)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgba(215,19,102,0.4)',\n    hoverBorderColor: 'rgba(215,19,102,1)',\n    data: [60, 39, 90, 71, 46, 35, 70]\n  }, {\n    label: 'My third dataset',\n    backgroundColor: 'rgba(215,19,102,0.8)',\n    borderColor: 'rgba(215,19,102,1)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'rgba(215,19,102,1)',\n    hoverBorderColor: 'rgba(215,19,102,1)',\n    data: [60, 39, 90, 71, 46, 35, 70]\n  }]\n};\nexport const ExpensesPerDaysDiagram = () => {\n  _s();\n\n  const [expenses, setExpenses] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    GetExpensesPerDayForCurrentMonth().then(res => {\n      if (res.response.status == 200) {\n        console.log(res);\n        setExpenses([...res.data]);\n        setIsLoading(false);\n      }\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      xs: 12,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n  const getData = () => {\n    let datasets = [];\n    console.log(expenses);\n\n    for (const expense of expenses) {\n      let color = randomColor(0.99, 0.99);\n      let color2 = randomColor(0.99, 0.99);\n      let sums = [];\n      console.log(expense);\n      console.log(expense.expenses);\n      expense.expenses.forEach(e => {\n        sums.push(e.money);\n      });\n      datasets.push({\n        label: expense.currencyCode,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        borderWidth: 1,\n        hoverBackgroundColor: color2.rgbString(),\n        hoverBorderColor: color2.rgbString(),\n        data: sums\n      });\n    }\n\n    const data = {\n      labels: Array.from({\n        length: CountDays()\n      }, (_, i) => i + 1),\n      datasets: datasets\n    };\n    return data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(BarDiagram, {\n    data: getData(),\n    title: {\n      display: true,\n      text: \"Expenses for current month\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: \"right\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesPerDaysDiagram, \"6BUmDSZ/4Umz2dzUpk2Gp+mYHVY=\");\n\n_c = ExpensesPerDaysDiagram;\nexport default ExpensesPerDaysDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesPerDaysDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/ExpensesPerDaysDiagram.tsx"],"names":["React","useEffect","useState","CountDays","BarDiagram","GetExpensesPerDayForCurrentMonth","CircularProgress","Grid","randomColor","require","data","labels","Array","from","length","_","i","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","ExpensesPerDaysDiagram","expenses","setExpenses","isLoading","setIsLoading","then","res","response","status","console","log","getData","expense","color","color2","sums","forEach","e","push","money","currencyCode","rgbString","display","text","fontSize","position"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PurseExpensesPerDay from '../../Data/Models/Expenses/PurseExpensesPerDay';\r\nimport CountDays from '../../Date/CountDays';\r\nimport BarDiagram from './Generic/BarDiagram';\r\nimport { GetExpensesPerDayForCurrentMonth } from '../../Services/expense.service/ExpenseService';\r\nimport { CircularProgress, Grid } from '@material-ui/core';\r\n\r\nconst randomColor = require('random-color');\r\n\r\nconst data = {\r\n\tlabels: Array.from({length: CountDays()}, (_, i) => i + 1),\r\n\tdatasets: [\r\n\t\t{\r\n\t\t\tlabel: 'My First dataset',\r\n\t\t\tbackgroundColor: 'rgba(255,99,132,0.2)',\r\n\t\t\tborderColor: 'rgba(255,99,132,1)',\r\n\t\t\tborderWidth: 1,\r\n\t\t\thoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n\t\t\thoverBorderColor: 'rgba(255,99,132,1)',\r\n\t\t\tdata: [65, 59, 80, 81, 56, 55, 40]\r\n        },\r\n        {\r\n\t\t\tlabel: 'My second dataset',\r\n\t\t\tbackgroundColor: 'rgba(215,19,102,0.2)',\r\n\t\t\tborderColor: 'rgba(215,19,102,1)',\r\n\t\t\tborderWidth: 1,\r\n\t\t\thoverBackgroundColor: 'rgba(215,19,102,0.4)',\r\n\t\t\thoverBorderColor: 'rgba(215,19,102,1)',\r\n\t\t\tdata: [60, 39, 90, 71, 46, 35, 70]\r\n        },\r\n        {\r\n\t\t\tlabel: 'My third dataset',\r\n\t\t\tbackgroundColor: 'rgba(215,19,102,0.8)',\r\n\t\t\tborderColor: 'rgba(215,19,102,1)',\r\n\t\t\tborderWidth: 1,\r\n\t\t\thoverBackgroundColor: 'rgba(215,19,102,1)',\r\n\t\t\thoverBorderColor: 'rgba(215,19,102,1)',\r\n\t\t\tdata: [60, 39, 90, 71, 46, 35, 70]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nexport const ExpensesPerDaysDiagram: React.FC = () => {\r\n\r\n    const [expenses, setExpenses] = useState<PurseExpensesPerDay[]>([]);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        GetExpensesPerDayForCurrentMonth()\r\n            .then(res => {\r\n                if(res.response.status == 200)\r\n                {\r\n                    console.log(res);\r\n                    setExpenses([...res.data]);\r\n                    setIsLoading(false);\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    if(isLoading)\r\n    {\r\n        return(\r\n            <Grid container xs={12} justify=\"center\">\r\n                <CircularProgress color=\"secondary\" />\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    const getData = () => {\r\n        let datasets: any[] = [];\r\n\r\n        console.log(expenses);\r\n        for(const expense of expenses)\r\n        {\r\n            let color = randomColor(0.99, 0.99);\r\n            let color2 = randomColor(0.99, 0.99);\r\n            \r\n            let sums: number[] = [];\r\n            \r\n            console.log(expense)\r\n            console.log(expense.expenses);\r\n            expense.expenses.forEach(e => {\r\n                sums.push(e.money);\r\n            });\r\n\r\n            datasets.push(\r\n                {\r\n                    label: expense.currencyCode,\r\n                    backgroundColor: color.rgbString(),\r\n                    borderColor: color.rgbString(),\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: color2.rgbString(),\r\n                    hoverBorderColor: color2.rgbString(),\r\n                    data: sums\r\n                }\r\n            );\r\n        }\r\n\r\n        const data = {\r\n            labels: Array.from({length: CountDays()}, (_, i) => i + 1),\r\n            datasets: datasets\r\n        };\r\n\r\n        return data;\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <BarDiagram data={getData()} title={{\r\n            display: true,\r\n            text: \"Expenses for current month\",\r\n            fontSize: 20\r\n        }} legend={{\r\n            display: true,\r\n            position: \"right\"\r\n        }} />\r\n    );\r\n}\r\n\r\nexport default ExpensesPerDaysDiagram;"]},"metadata":{},"sourceType":"module"}