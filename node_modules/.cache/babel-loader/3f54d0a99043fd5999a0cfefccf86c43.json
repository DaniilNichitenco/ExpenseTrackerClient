{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useSessionStorageAsync = (key, fn) => {\n  _s();\n\n  useEffect(() => {\n    const item = SeStorage.getItem(key);\n\n    if (item) {\n      setValue(JSON.parse(item));\n    } else {\n      fn().then(result => setValue(result)).catch(error => {\n        console.log(\"Error happens in useLocalStorageAsync hook, block 'useEffect'\");\n        console.log(error);\n      });\n    }\n  }, []);\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useLocalStorageAsync hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = localStorage.getItem(key);\n\n    if (item != null) {\n      localStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorageAsync, \"wQ7ANgJ8MfuBNk7OhmNPf7ARUXs=\");\n\nexport default useSessionStorageAsync;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/AsyncHooks/useSessionStorageAsync.tsx"],"names":["useEffect","useState","useSessionStorageAsync","key","fn","item","SeStorage","getItem","setValue","JSON","parse","then","result","catch","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","localStorage","setItem","stringify","removeValue","removeItem"],"mappings":";;AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;;AAEA,MAAMC,sBAAsB,GAAG,CAAoBC,GAApB,EAAiCC,EAAjC,KAA0D;AAAA;;AAErFJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMK,IAAI,GAAGC,SAAS,CAACC,OAAV,CAAkBJ,GAAlB,CAAb;;AACA,QAAGE,IAAH,EACA;AACIG,MAAAA,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAD,CAAR;AACH,KAHD,MAKA;AACID,MAAAA,EAAE,GAAGO,IAAL,CAAUC,MAAM,IAAIJ,QAAQ,CAACI,MAAD,CAA5B,EACKC,KADL,CACWC,KAAK,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAJL;AAKH;AACJ,GAdQ,EAcN,EAdM,CAAT;AAgBA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,EAA9C;;AAEA,QAAMO,QAAQ,GAAIW,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACF,WAAD,CADY,GACIE,KADzB;AAGAD,MAAAA,cAAc,CAACE,YAAD,CAAd;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqBpB,GAArB,EAA0BM,IAAI,CAACe,SAAL,CAAeJ,YAAf,CAA1B;AACH,KAPD,CAQA,OAAMN,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,8DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMW,WAAW,GAAG,MAAM;AACtB,UAAMpB,IAAI,GAAGiB,YAAY,CAACf,OAAb,CAAqBJ,GAArB,CAAb;;AACA,QAAGE,IAAI,IAAI,IAAX,EACA;AACIiB,MAAAA,YAAY,CAACI,UAAb,CAAwBvB,GAAxB;AACH;AACJ,GAND;;AAQA,SAAO,CAACc,WAAD,EAAcT,QAAd,EAAwBiB,WAAxB,CAAP;AACH,CA7CD;;GAAMvB,sB;;AA+CN,eAAeA,sBAAf","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nconst useSessionStorageAsync = <T extends unknown>(key: string, fn: () => Promise<T>) => {\r\n\r\n    useEffect(() => {\r\n        const item = SeStorage.getItem(key);\r\n        if(item)\r\n        {\r\n            setValue(JSON.parse(item) as T);\r\n        }\r\n        else\r\n        {\r\n            fn().then(result => setValue(result))\r\n                .catch(error => {\r\n                    console.log(\"Error happens in useLocalStorageAsync hook, block 'useEffect'\");\r\n                    console.log(error);\r\n                });\r\n        }\r\n    }, [])\r\n\r\n    const [storedValue, setStoredValue] = useState<T>() as [T, Dispatch<SetStateAction<T>>];\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useLocalStorageAsync hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = localStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorageAsync;"]},"metadata":{},"sourceType":"module"}