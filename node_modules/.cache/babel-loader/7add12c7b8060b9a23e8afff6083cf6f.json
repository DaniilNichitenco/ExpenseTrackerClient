{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(\"Error happens in useLocalStorage hook, block 'storedValue'\");\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useLocalStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = localStorage.getItem(key);\n\n    if (item != null) {\n      localStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useLocalStorage, \"WAcwLenfAjG3Nac3GOX3PSpFnxU=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useLocalStorage.tsx"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,eAAe,GAAG,CAAoBC,GAApB,EAAiCC,YAAjC,KAAoD;AAAA;;AAExE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAI,MAAM;AACpD,QACA;AACI,YAAMM,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAb;AACA,aAAOI,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAH,GAAsBH,YAAjC;AACH,KAJD,CAKA,OAAMQ,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOR,YAAP;AACH;AACJ,GAZ6C,CAA9C;;AAcA,QAAMW,QAAQ,GAAIC,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACX,WAAD,CADY,GACIW,KADzB;AAGAV,MAAAA,cAAc,CAACW,YAAD,CAAd;AACAT,MAAAA,YAAY,CAACW,OAAb,CAAqBhB,GAArB,EAA0BO,IAAI,CAACU,SAAL,CAAeH,YAAf,CAA1B;AACH,KAPD,CAQA,OAAML,KAAN,EACA;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMS,WAAW,GAAG,MAAM;AACtB,UAAMd,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAb;;AACA,QAAGI,IAAI,IAAI,IAAX,EACA;AACIC,MAAAA,YAAY,CAACc,UAAb,CAAwBnB,GAAxB;AACH;AACJ,GAND;;AAQA,SAAO,CAACE,WAAD,EAAcU,QAAd,EAAwBM,WAAxB,CAAP;AACH,CAzCD;;GAAMnB,e;;AA2CN,eAAeA,eAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useLocalStorage = <T extends unknown>(key: string, initialValue:T) => {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try\r\n        {\r\n            const item = localStorage.getItem(key);\r\n            return item ? JSON.parse(item) : initialValue;\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useLocalStorage hook, block 'storedValue'\");\r\n            console.log(error);\r\n            return initialValue;\r\n        }\r\n    });\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useLocalStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = localStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useLocalStorage;"]},"metadata":{},"sourceType":"module"}