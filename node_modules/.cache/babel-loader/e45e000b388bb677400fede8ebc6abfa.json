{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\ExpensesList\\\\ExpensesList.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, GridList, Button, Box, Paper, Typography, CircularProgress } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\nimport TopicService from '../../Services/topic.services/TopicService';\nexport const ExpensesList = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true); // const [topics, setTopics, removeTopics] = useSessionStorage<Topic[]>(\"topics\", []);\n  // const [expenses, setExpenses, removeExpenses] = useSessionStorage<Expense[]>(\"expenses\", []);\n\n  const [topicsWithExpenses, setTopicsWithExpenses, removeTopicsWithExpenses] = useSessionStorage(\"topicsWithExpenses\", []);\n  const [a, setA] = useState([{\n    id: 1,\n    name: \"1\",\n    expenses: [{\n      id: 2,\n      purseId: 1,\n      title: \"3 expense\",\n      date: new Date(\"2020-02-03T00:00:00\"),\n      money: 400\n    }]\n  }]);\n  useEffect(() => {\n    console.log(\"ExpensesList effect\");\n\n    if (topicsWithExpenses.length == 0) {\n      TopicService.GetTopicsWithExpenses(10).then(result => {\n        console.log(result);\n\n        if (result.response.status == 200) {\n          setTopicsWithExpenses(result.data);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      console.log(\"topics: \" + JSON.stringify(topicsWithExpenses));\n      setIsLoading(false);\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(GridList, {\n    cellHeight: \"auto\",\n    cols: 2,\n    style: {\n      width: \"100%\",\n      paddingBottom: 40,\n      marginTop: 20\n    },\n    children: topicsWithExpenses.map(topic => {\n      const expensesTopic = topic.expenses.slice(0, 10);\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        justify: \"center\",\n        style: {\n          marginBottom: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 7,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              width: \"100%\",\n              padding: 0\n            },\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              elevation: 20,\n              style: {\n                marginBottom: 10,\n                width: \"100%\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                p: 1,\n                style: {\n                  backgroundColor: \"black\",\n                  color: \"white\",\n                  borderRadius: \"10px 10px 0 0\"\n                },\n                justifyContent: \"center\",\n                children: \"sa\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 37\n              }, this), expensesTopic.length == 0 && /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexWrap: \"wrap\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  children: \"There are not any expenses\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 41\n              }, this), expensesTopic.map(expense => {\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  flexWrap: \"wrap\",\n                  children: /*#__PURE__*/_jsxDEV(Typography, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 45\n                  }, this)\n                }, expense.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this)\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesList, \"j4qLGpr05WXNu4cF1hnIOW7hNtg=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = ExpensesList;\nexport default ExpensesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesList\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/ExpensesList/ExpensesList.tsx"],"names":["Grid","GridList","Button","Box","Paper","Typography","CircularProgress","React","useEffect","useState","useSessionStorage","TopicService","ExpensesList","isLoading","setIsLoading","topicsWithExpenses","setTopicsWithExpenses","removeTopicsWithExpenses","a","setA","id","name","expenses","purseId","title","date","Date","money","console","log","length","GetTopicsWithExpenses","then","result","response","status","data","catch","error","JSON","stringify","width","paddingBottom","marginTop","map","topic","expensesTopic","slice","marginBottom","padding","backgroundColor","color","borderRadius","expense"],"mappings":"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","sourcesContent":["import { Grid, GridList, Button, Box, Paper, Typography, CircularProgress } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\r\nimport Expense from '../../Data/Models/Expenses/Expense';\r\nimport Topic from '../../Data/Models/Topics/Topic';\r\nimport TopicWithExpenses from '../../Data/Models/Topics/TopicWithExpenses';\r\nimport TopicService from '../../Services/topic.services/TopicService';\r\n\r\nexport const ExpensesList: React.FC = () => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // const [topics, setTopics, removeTopics] = useSessionStorage<Topic[]>(\"topics\", []);\r\n    // const [expenses, setExpenses, removeExpenses] = useSessionStorage<Expense[]>(\"expenses\", []);\r\n    const [topicsWithExpenses, setTopicsWithExpenses, \r\n        removeTopicsWithExpenses] = useSessionStorage<TopicWithExpenses[]>(\"topicsWithExpenses\", []);\r\n        const [a, setA] = useState<TopicWithExpenses[]>(\r\n            [\r\n                {id: 1, name:\"1\", \r\n                    expenses:[\r\n                        {id: 2, purseId: 1, title: \"3 expense\", \r\n                        date: new Date(\"2020-02-03T00:00:00\"), money: 400}\r\n                        ,],\r\n                }]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"ExpensesList effect\");\r\n\r\n        if(topicsWithExpenses.length == 0)\r\n        {\r\n            TopicService.GetTopicsWithExpenses(10)\r\n            .then(result => {\r\n                console.log(result);\r\n                if(result.response.status == 200)\r\n                {\r\n                    setTopicsWithExpenses(result.data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            console.log(\"topics: \" + JSON.stringify(topicsWithExpenses));\r\n            setIsLoading(false);\r\n        }\r\n\r\n    }, []);\r\n\r\n    if(isLoading)\r\n    {\r\n        return(<CircularProgress color=\"secondary\" />);\r\n    }\r\n\r\n    return(\r\n        <GridList cellHeight={\"auto\"}\r\n        cols={2} style={{width:\"100%\", paddingBottom:40, marginTop:20}}\r\n        >\r\n            {topicsWithExpenses.map((topic) => {\r\n                const expensesTopic = topic.expenses.slice(0, 10);\r\n\r\n                return(\r\n                        <Grid item container key={topic.id}\r\n                        justify=\"center\" style={{ marginBottom: 10}}\r\n                        >\r\n                            <Grid item xs={7}>\r\n                                <Button style={{width:\"100%\", padding:0}}>\r\n                                <Paper elevation={20} style={{marginBottom:10, width:\"100%\"}}\r\n                                >\r\n                                    <Box display=\"flex\" p={1}\r\n                                    style={{backgroundColor: \"black\", color:\"white\",\r\n                                    borderRadius:\"10px 10px 0 0\"\r\n                                }} \r\n                                    justifyContent=\"center\">\r\n                                        {/* <Typography>{topic}</Typography> */}sa\r\n                                    </Box>\r\n                                    {\r\n                                        expensesTopic.length == 0 &&\r\n                                        <Box display=\"flex\" justifyContent=\"center\"\r\n                                        flexWrap=\"wrap\">\r\n                                            <Typography variant=\"h5\">\r\n                                                There are not any expenses\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    }\r\n                                    {expensesTopic.map((expense) => {\r\n                                        return(\r\n                                        <Box display=\"flex\" justifyContent=\"center\"\r\n                                        flexWrap=\"wrap\" key={expense.id}\r\n                                        >\r\n                                            <Typography>\r\n                                                {/* {expense.title} - {expense.money} */}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        );\r\n                                    })}\r\n                                </Paper>\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n            );})}\r\n        </GridList>\r\n    );\r\n}\r\n\r\nexport default ExpensesList;"]},"metadata":{},"sourceType":"module"}