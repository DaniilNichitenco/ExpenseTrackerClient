{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useSessionStorageAsync = (key, fn) => {\n  _s();\n\n  useEffect(() => {\n    console.log(key);\n    const item = sessionStorage.getItem(key);\n    console.log(item);\n\n    const fetch = async () => {\n      // fn().then(result => {\n      //     setValue(result);\n      //     console.log(result);\n      // })\n      //     .catch(error => {\n      //         console.log(\"Error happens in useSessionStorageAsync hook, block 'useEffect'\");\n      //         console.log(error);\n      //     });\n      const item = await fn();\n      console.log(\"fetch:\" + item);\n      setValue(item);\n    };\n\n    if (item != null && item != \"undefined\") {\n      console.log(\"parse\");\n      setValue(JSON.parse(item));\n    } else {\n      console.log(\"fetch\");\n      fetch();\n    }\n  }, []);\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorageAsync hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorageAsync, \"wQ7ANgJ8MfuBNk7OhmNPf7ARUXs=\");\n\nexport default useSessionStorageAsync;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/AsyncHooks/useSessionStorageAsync.tsx"],"names":["useEffect","useState","useSessionStorageAsync","key","fn","console","log","item","sessionStorage","getItem","fetch","setValue","JSON","parse","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","error","removeValue","removeItem"],"mappings":";;AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;;AAEA,MAAMC,sBAAsB,GAAG,CAAoBC,GAApB,EAAiCC,EAAjC,KAA0D;AAAA;;AAErFJ,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAMI,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBN,GAAvB,CAAb;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;;AAEA,UAAMG,KAAK,GAAG,YAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMH,IAAI,GAAG,MAAMH,EAAE,EAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWC,IAAvB;AACAI,MAAAA,QAAQ,CAACJ,IAAD,CAAR;AACH,KAZD;;AAcA,QAAGA,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,WAA3B,EACA;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAK,MAAAA,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAD,CAAR;AACH,KAJD,MAMA;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAI,MAAAA,KAAK;AACR;AACJ,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,EAA9C;;AAEA,QAAMU,QAAQ,GAAIK,KAAD,IAAc;AAC3B,QACA;AACI,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACF,WAAD,CADY,GACIE,KADzB;AAGAD,MAAAA,cAAc,CAACE,YAAD,CAAd;AACAT,MAAAA,cAAc,CAACW,OAAf,CAAuBhB,GAAvB,EAA4BS,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAA5B;AACH,KAPD,CAQA,OAAMI,KAAN,EACA;AACIhB,MAAAA,OAAO,CAACC,GAAR,CAAY,gEAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACH;AACJ,GAdD;;AAgBA,QAAMC,WAAW,GAAG,MAAM;AACtB,UAAMf,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBN,GAAvB,CAAb;;AACA,QAAGI,IAAI,IAAI,IAAX,EACA;AACIC,MAAAA,cAAc,CAACe,UAAf,CAA0BpB,GAA1B;AACH;AACJ,GAND;;AAQA,SAAO,CAACW,WAAD,EAAcH,QAAd,EAAwBW,WAAxB,CAAP;AACH,CA5DD;;GAAMpB,sB;;AA8DN,eAAeA,sBAAf","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\n\r\nconst useSessionStorageAsync = <T extends unknown>(key: string, fn: () => Promise<T>) => {\r\n\r\n    useEffect(() => {\r\n        console.log(key);\r\n        const item = sessionStorage.getItem(key);\r\n        console.log(item);\r\n\r\n        const fetch = async () => {\r\n            // fn().then(result => {\r\n            //     setValue(result);\r\n            //     console.log(result);\r\n            // })\r\n            //     .catch(error => {\r\n            //         console.log(\"Error happens in useSessionStorageAsync hook, block 'useEffect'\");\r\n            //         console.log(error);\r\n            //     });\r\n            const item = await fn();\r\n            console.log(\"fetch:\" + item);\r\n            setValue(item);\r\n        }\r\n\r\n        if(item != null && item != \"undefined\")\r\n        {\r\n            console.log(\"parse\");\r\n            setValue(JSON.parse(item) as T);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"fetch\");\r\n            fetch();\r\n        }\r\n    }, [])\r\n\r\n    const [storedValue, setStoredValue] = useState<T>() as [T, Dispatch<SetStateAction<T>>];\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorageAsync hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorageAsync;"]},"metadata":{},"sourceType":"module"}