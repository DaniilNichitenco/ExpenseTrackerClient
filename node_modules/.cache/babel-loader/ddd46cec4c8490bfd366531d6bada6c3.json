{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\ExpensesPerMonthLineDiargam.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\nimport { GetExpensesForCurrentYear } from \"../../Services/expense.service/ExpenseService\";\n\nconst randomColor = require('random-color');\n\nconst ExpensesPerMonthLineDiagram = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [expensesForYearData, setExpensesForYearData] = useSessionStorage(\"expensesForYearData\", []);\n  useEffect(() => {\n    GetExpensesForCurrentYear().then(result => {\n      if (result.response.status == 200) {\n        setExpensesForYearData(result.data);\n        setIsLoading(false);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const getData = () => {\n    let datasets = [];\n    expensesForYearData.forEach((expense, index) => {\n      let color = randomColor(0.99, 0.99);\n      let expenses = [];\n      expense.expenses.forEach(exp => {\n        expenses.push(exp.money);\n      });\n      datasets.push({\n        label: expense.currencyCode.toUpperCase(),\n        data: expenses,\n        lineTension: 0.1,\n        fill: false,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        pointBorderColor: color.rgbString(),\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 9,\n        pointHoverBackgroundColor: color.rgbString(),\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10\n      });\n    });\n    const data = {\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      datasets: datasets\n    };\n    return data;\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ExpensesLineDiagram, {\n    data: getData(),\n    title: \"Expenses for current year\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesPerMonthLineDiagram, \"OfmJF3KpU56yCM7om/8Na9qw2Bw=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = ExpensesPerMonthLineDiagram;\nexport default ExpensesPerMonthLineDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesPerMonthLineDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/ExpensesPerMonthLineDiargam.tsx"],"names":["CircularProgress","React","useEffect","useState","useSessionStorage","ExpensesLineDiagram","GetExpensesForCurrentYear","randomColor","require","ExpensesPerMonthLineDiagram","props","isLoading","setIsLoading","expensesForYearData","setExpensesForYearData","then","result","response","status","data","catch","error","console","log","getData","datasets","forEach","expense","index","color","expenses","exp","push","money","label","currencyCode","toUpperCase","lineTension","fill","backgroundColor","rgbString","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","labels"],"mappings":"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","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\r\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\r\nimport ExpensesForYearDefault from '../../Data/Models/Expenses/default/ExpensesForYearDefault';\r\nimport { GetExpensesForCurrentYear } from \"../../Services/expense.service/ExpenseService\";\r\nimport ExpensesForYear from \"../../Data/Models/Expenses/ExpensesForYear\";\r\n\r\nconst randomColor = require('random-color');\r\n\r\ninterface ExpensesPerMonthLineDiagramProps\r\n  {\r\n    paddingLeft?: number,\r\n    paddingRight?: number,\r\n    paddingBottom?: number,\r\n    paddingTop?: number,\r\n    width?: number,\r\n  }\r\n  \r\n\r\n  const ExpensesPerMonthLineDiagram:React.FC<ExpensesPerMonthLineDiagramProps> = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [expensesForYearData, setExpensesForYearData] = useSessionStorage<ExpensesForYear[]>(\r\n      \"expensesForYearData\", []);\r\n\r\n    useEffect(() => {\r\n        GetExpensesForCurrentYear()\r\n          .then(result => {\r\n            if(result.response.status == 200)\r\n            {\r\n              setExpensesForYearData(result.data);\r\n              setIsLoading(false);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          })\r\n    }, []);\r\n\r\n    const getData = () => {\r\n      let datasets:any[] = [];\r\n\r\n      expensesForYearData.forEach((expense, index) => {\r\n        let color = randomColor(0.99, 0.99);\r\n\r\n        let expenses: number[] = [];\r\n        expense.expenses.forEach(exp => {\r\n          expenses.push(exp.money);\r\n        });\r\n        \r\n\r\n        datasets.push(\r\n          {\r\n            label: expense.currencyCode.toUpperCase(),\r\n            data: expenses,\r\n            lineTension: 0.1,\r\n            fill: false,\r\n            backgroundColor: color.rgbString(),\r\n            borderColor: color.rgbString(),\r\n            pointBorderColor: color.rgbString(),\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 2,\r\n            pointHoverRadius: 9,\r\n            pointHoverBackgroundColor: color.rgbString(),\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 4,\r\n            pointHitRadius: 10,\r\n            }\r\n        )\r\n      });\r\n\r\n      const data = {\r\n        labels: [\r\n          'January', 'February', 'March',\r\n          'April', 'May', 'June',\r\n          'July', 'August', 'September', 'October',\r\n          'November', 'December'\r\n                ],\r\n        datasets: datasets\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    if(isLoading)\r\n    {\r\n      return (<CircularProgress color=\"secondary\" />);\r\n    }\r\n\r\n    return(\r\n        <ExpensesLineDiagram \r\n        data={getData()}\r\n        title=\"Expenses for current year\"\r\n        />\r\n    );\r\n  }\r\n\r\n  export default ExpensesPerMonthLineDiagram;"]},"metadata":{},"sourceType":"module"}