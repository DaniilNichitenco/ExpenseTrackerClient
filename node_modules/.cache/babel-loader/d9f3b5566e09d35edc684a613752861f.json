{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\ExpensesPerMonthLineDiargam.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\nimport ExpensesForYearDefault from '../../Data/Models/Expenses/default/ExpensesForYearDefault';\nimport ExpenseService from \"../../Services/expense.service/ExpenseService\";\n\nconst randomColor = require('random-color');\n\nconst getExpenses = () => {\n  let purses = [{\n    id: 1,\n    bill: 1000,\n    currencyCode: 'usd'\n  }, {\n    id: 2,\n    bill: 2000,\n    currencyCode: 'usd'\n  }, {\n    id: 1,\n    bill: 3000,\n    currencyCode: 'usd'\n  }];\n  return purses;\n};\n\nconst getState = () => {\n  let datasets = [];\n\n  const getRandomNumber = (min = 0, max = 100) => {\n    return Math.random() * (max - min) + min;\n  };\n\n  getExpenses().forEach(e => {\n    let color = randomColor(0.99, 0.99);\n    datasets.push({\n      label: e.currencyCode.toUpperCase(),\n      data: [getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber(), getRandomNumber()],\n      lineTension: 0.1,\n      fill: false,\n      backgroundColor: color.rgbString(),\n      borderColor: color.rgbString(),\n      pointBorderColor: color.rgbString(),\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 2,\n      pointHoverRadius: 9,\n      pointHoverBackgroundColor: color.rgbString(),\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10\n    });\n  });\n  const state2 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    datasets: datasets\n  };\n  return state2;\n};\n\nconst ExpensesPerMonthLineDiagram = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [expensesForYearData, setExpensesForYearData, removeExpensesForYearData] = useSessionStorage(\"expensesForYearData\", ExpensesForYearDefault);\n  useEffect(() => {\n    if (expensesForYearData == ExpensesForYearDefault) {\n      ExpenseService.GetExpensesForCurrentYear().then(response => {\n        setExpensesForYearData(response);\n        setIsLoading(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const getDatasets = () => {\n    let datasets = [];\n    expensesForYearData.forEach(e => {\n      let color = randomColor(0.99, 0.99);\n      let expenses = [];\n      e.expenses.forEach(exp => {\n        expenses.push(exp.money);\n      });\n      datasets.push({\n        label: e.currencyCode.toUpperCase(),\n        data: expenses,\n        lineTension: 0.1,\n        fill: false,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        pointBorderColor: color.rgbString(),\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 9,\n        pointHoverBackgroundColor: color.rgbString(),\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10\n      });\n    });\n    const data = {\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      datasets: []\n    };\n    return data;\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ExpensesLineDiagram, {\n    data: getDatasets(),\n    paddingBottom: props.paddingBottom,\n    paddingLeft: props.paddingLeft,\n    paddingRight: props.paddingRight,\n    paddingTop: props.paddingTop\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesPerMonthLineDiagram, \"JU8fS+sz+ee3IY0y+LOUOGcRpLg=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = ExpensesPerMonthLineDiagram;\nexport default ExpensesPerMonthLineDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesPerMonthLineDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/ExpensesPerMonthLineDiargam.tsx"],"names":["CircularProgress","React","useEffect","useState","useSessionStorage","ExpensesLineDiagram","ExpensesForYearDefault","ExpenseService","randomColor","require","getExpenses","purses","id","bill","currencyCode","getState","datasets","getRandomNumber","min","max","Math","random","forEach","e","color","push","label","toUpperCase","data","lineTension","fill","backgroundColor","rgbString","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","state2","labels","ExpensesPerMonthLineDiagram","props","isLoading","setIsLoading","expensesForYearData","setExpensesForYearData","removeExpensesForYearData","GetExpensesForCurrentYear","then","response","catch","error","console","log","getDatasets","expenses","exp","money","paddingBottom","paddingLeft","paddingRight","paddingTop"],"mappings":"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","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\r\nimport Purse from \"../../Data/Models/Purses/Purse\";\r\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\r\nimport ExpensesForYearDefault from '../../Data/Models/Expenses/default/ExpensesForYearDefault';\r\nimport ExpenseService from \"../../Services/expense.service/ExpenseService\";\r\n\r\n\r\nconst randomColor = require('random-color');\r\n\r\nconst getExpenses = () => {\r\n\r\n  let purses:Purse[] = [\r\n    {\r\n      id:1,\r\n      bill: 1000,\r\n      currencyCode: 'usd',\r\n    },\r\n    {\r\n      id:2,\r\n      bill: 2000,\r\n      currencyCode: 'usd',\r\n    },\r\n    {\r\n      id:1,\r\n      bill: 3000,\r\n      currencyCode: 'usd',\r\n    }\r\n  ]\r\n  return purses;\r\n}\r\n\r\nconst getState = () => {\r\n  \r\n  let datasets:any[] = [];\r\n  const getRandomNumber = (min = 0, max = 100) => {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  getExpenses().forEach(e => {\r\n\r\n    let color = randomColor(0.99, 0.99);\r\n\r\n    datasets.push(\r\n      {\r\n        label: e.currencyCode.toUpperCase(),\r\n        data: [\r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(), \r\n          getRandomNumber(),\r\n        ],\r\n        lineTension: 0.1,\r\n        fill: false,\r\n        backgroundColor: color.rgbString(),\r\n        borderColor: color.rgbString(),\r\n        pointBorderColor: color.rgbString(),\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 2,\r\n        pointHoverRadius: 9,\r\n        pointHoverBackgroundColor: color.rgbString(),\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 4,\r\n        pointHitRadius: 10,\r\n          }\r\n    )\r\n  });\r\n\r\n  const state2= {\r\n    labels: [\r\n      'January', 'February', 'March',\r\n      'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October',\r\n      'November', 'December'\r\n            ],\r\n    datasets: datasets\r\n  }\r\n\r\n  return state2;\r\n}\r\n\r\ninterface ExpensesPerMonthLineDiagramProps\r\n  {\r\n    paddingLeft?: number,\r\n    paddingRight?: number,\r\n    paddingBottom?: number,\r\n    paddingTop?: number,\r\n    width?: number,\r\n  }\r\n  \r\n\r\n  const ExpensesPerMonthLineDiagram:React.FC<ExpensesPerMonthLineDiagramProps> = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [expensesForYearData, setExpensesForYearData, \r\n      removeExpensesForYearData] = useSessionStorage(\"expensesForYearData\", ExpensesForYearDefault)\r\n\r\n    useEffect(() => {\r\n\r\n      if(expensesForYearData == ExpensesForYearDefault)\r\n      {\r\n        ExpenseService.GetExpensesForCurrentYear()\r\n          .then(response => {\r\n            setExpensesForYearData(response);\r\n            setIsLoading(false);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          })\r\n      }\r\n      setIsLoading(false);\r\n\r\n    }, []);\r\n\r\n    const getDatasets = () => {\r\n      let datasets:any[] = [];\r\n\r\n      expensesForYearData.forEach(e => {\r\n\r\n        let color = randomColor(0.99, 0.99);\r\n\r\n        let expenses: number[] = [];\r\n        e.expenses.forEach(exp => {\r\n          expenses.push(exp.money);\r\n        });\r\n\r\n        datasets.push(\r\n          {\r\n            label: e.currencyCode.toUpperCase(),\r\n            data: expenses,\r\n            lineTension: 0.1,\r\n            fill: false,\r\n            backgroundColor: color.rgbString(),\r\n            borderColor: color.rgbString(),\r\n            pointBorderColor: color.rgbString(),\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 2,\r\n            pointHoverRadius: 9,\r\n            pointHoverBackgroundColor: color.rgbString(),\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 4,\r\n            pointHitRadius: 10,\r\n              }\r\n        )\r\n      });\r\n\r\n      const data = {\r\n        labels: [\r\n          'January', 'February', 'March',\r\n          'April', 'May', 'June',\r\n          'July', 'August', 'September', 'October',\r\n          'November', 'December'\r\n                ],\r\n        datasets: []\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    if(isLoading)\r\n    {\r\n      return (<CircularProgress color=\"secondary\" />);\r\n    }\r\n\r\n    return(\r\n        <ExpensesLineDiagram \r\n        data={getDatasets()}\r\n        paddingBottom={props.paddingBottom}\r\n        paddingLeft={props.paddingLeft}\r\n        paddingRight={props.paddingRight}\r\n        paddingTop={props.paddingTop}\r\n        />\r\n    );\r\n  }\r\n\r\n  export default ExpensesPerMonthLineDiagram;"]},"metadata":{},"sourceType":"module"}