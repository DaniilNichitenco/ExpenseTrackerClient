{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Forms\\\\SignInForm\\\\SignInForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useForm, FormProvider } from \"react-hook-form\";\nimport { Button, DialogTitle, DialogContent, DialogContentText, DialogActions, makeStyles, Typography } from \"@material-ui/core\";\nimport InputForm from '../InputForm/InputForm';\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { signIn } from \"../../../Services/auth.services/auth-service\";\nimport { useHistory } from \"react-router-dom\";\nconst validationSchema = yup.object().shape({\n  login: yup.string().required(\"Enter login!\"),\n  password: yup.string().required(\"Enter password!\")\n});\nconst useStyles = makeStyles(theme => ({\n  title: {\n    alignSelf: \"center\",\n    color: \"black\"\n  },\n  subtitle: {\n    color: \"black\"\n  },\n  buttonContainer: {\n    justifyContent: \"center\",\n    marginTop: 30\n  },\n  button: {\n    marginLeft: 50,\n    marginRight: 50\n  }\n}));\n\nconst SignInForm = props => {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const methods = useForm({\n    resolver: yupResolver(validationSchema)\n  });\n  const {\n    handleSubmit,\n    errors\n  } = methods;\n  const [signInError, setSignInError] = useState(\"\");\n\n  const onSubmit = async formValues => {\n    signIn(formValues).then(response => {\n      if (response.status == 200) {\n        props.handleClose();\n        history.push(\"/au/home\");\n      } else {\n        setSignInError(\"Incorrect login or password\");\n      }\n    }).catch(error => {\n      console.log(error);\n      setSignInError(\"Cannot sign in, server may be down\");\n    });\n  }; // const signIn = async (formValues: UserForSignIn) => {\n  //     signIn(formValues)\n  //         .then(response => {\n  //             if(response.status == 200)\n  //             {\n  //                 props.handleClose();\n  //                 history.push(\"/au/home\");\n  //             }\n  //             else\n  //             {\n  //                 setSignInError(\"Incorrect login or password\");\n  //             }\n  //         })\n  //         .catch(error => {\n  //             console.log(error);\n  //             setSignInError(\"Cannot sign in, server may be down\");\n  //         });      \n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      className: classes.title,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        className: classes.subtitle,\n        children: [\"Please, fill fields to sign in\", /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\",\n            fontWeight: 400,\n            fontSize: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: signInError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(InputForm, {\n          errorObj: errors,\n          name: \"login\",\n          label: \"Login(Username/Email)\",\n          autoFocus: true,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n          errorObj: errors,\n          type: \"password\",\n          name: \"password\",\n          label: \"Password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        className: classes.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSubmit(onSubmit),\n          className: classes.button,\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: props.handleClose,\n          className: classes.button,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SignInForm, \"+TjJ0lqxfWJ+lzb0Fix0d0Y5wqg=\", false, function () {\n  return [useStyles, useHistory, useForm];\n});\n\n_c = SignInForm;\nexport default SignInForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInForm\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Forms/SignInForm/SignInForm.tsx"],"names":["React","useState","useForm","FormProvider","Button","DialogTitle","DialogContent","DialogContentText","DialogActions","makeStyles","Typography","InputForm","yup","yupResolver","signIn","useHistory","validationSchema","object","shape","login","string","required","password","useStyles","theme","title","alignSelf","color","subtitle","buttonContainer","justifyContent","marginTop","button","marginLeft","marginRight","SignInForm","props","classes","history","methods","resolver","handleSubmit","errors","signInError","setSignInError","onSubmit","formValues","then","response","status","handleClose","push","catch","error","console","log","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useForm, FormProvider, SubmitHandler } from \"react-hook-form\";\r\nimport { Button, DialogTitle, DialogContent, DialogContentText, DialogActions, makeStyles, Theme, Typography } from \"@material-ui/core\";\r\nimport InputForm from '../InputForm/InputForm';\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport ISignInFormProps from './ISignInFormProps';\r\nimport UserForSignIn from \"../../../Data/Models/User/UserForSignIn\";\r\nimport { signIn } from \"../../../Services/auth.services/auth-service\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst validationSchema = yup.object().shape({\r\n    login: yup.string().required(\"Enter login!\"),\r\n    password: yup.string().required(\"Enter password!\")\r\n  });\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    title: {\r\n        alignSelf: \"center\",\r\n        color: \"black\"\r\n    },\r\n    subtitle: {\r\n        color: \"black\"\r\n    },\r\n    buttonContainer: {\r\n        justifyContent: \"center\",\r\n        marginTop: 30\r\n    },\r\n    button: {\r\n        marginLeft:50,\r\n        marginRight:50\r\n    }\r\n}));\r\n\r\nconst SignInForm: React.FC<ISignInFormProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const methods = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n    const { handleSubmit, errors } = methods;\r\n    const [signInError, setSignInError] = useState(\"\");\r\n\r\n    const onSubmit = async (formValues: UserForSignIn) => {\r\n        signIn(formValues)\r\n            .then(response => {\r\n                if(response.status == 200)\r\n                {\r\n                    props.handleClose();\r\n                    history.push(\"/au/home\");\r\n                }\r\n                else\r\n                {\r\n                    setSignInError(\"Incorrect login or password\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                setSignInError(\"Cannot sign in, server may be down\");\r\n            });   \r\n    };\r\n\r\n    // const signIn = async (formValues: UserForSignIn) => {\r\n        \r\n    //     signIn(formValues)\r\n    //         .then(response => {\r\n    //             if(response.status == 200)\r\n    //             {\r\n    //                 props.handleClose();\r\n    //                 history.push(\"/au/home\");\r\n    //             }\r\n    //             else\r\n    //             {\r\n    //                 setSignInError(\"Incorrect login or password\");\r\n    //             }\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //             setSignInError(\"Cannot sign in, server may be down\");\r\n    //         });      \r\n    // }\r\n\r\n    return(\r\n        <FormProvider {...methods}>\r\n            <DialogTitle id=\"form-dialog-title\" className={classes.title}>\r\n                Sign In\r\n            </DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText className={classes.subtitle}>\r\n                Please, fill fields to sign in\r\n            <p style={{color:\"red\", fontWeight:400, fontSize:16}}>\r\n                <Typography>\r\n                    {signInError}\r\n                </Typography>\r\n            </p>\r\n            </DialogContentText>\r\n            <form>\r\n                <InputForm \r\n                errorObj={errors}\r\n                name=\"login\" \r\n                label=\"Login(Username/Email)\" \r\n                autoFocus={true} \r\n                required={true}\r\n                />\r\n                <InputForm \r\n                errorObj={errors}\r\n                type=\"password\"\r\n                name=\"password\" \r\n                label=\"Password\" \r\n                required={true}\r\n                />\r\n            </form>\r\n            <DialogActions className={classes.buttonContainer}>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={handleSubmit(onSubmit)}\r\n                    className={classes.button}\r\n                    >\r\n                    Sign In\r\n                </Button>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={props.handleClose}\r\n                    className={classes.button}\r\n                    >\r\n                    Cancel\r\n                </Button>\r\n            </DialogActions>\r\n            </DialogContent>\r\n        </FormProvider>\r\n    );\r\n}\r\n\r\nexport default SignInForm;"]},"metadata":{},"sourceType":"module"}