{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { deepEqual, propertiesEqual } from \"../../Comparers/ObjectsComparer\";\n\nconst useSessionStorage = (key, initialValue, check = false) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = sessionStorage.getItem(key);\n\n      if (item != null && item != \"undefined\") {\n        return JSON.parse(item);\n      }\n\n      return initialValue;\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\n      console.log(error);\n      return initialValue;\n    }\n  });\n  let a = storedValue;\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  useEffect(() => {\n    if (check) {\n      setInterval(() => {\n        const itemStr = sessionStorage.getItem(key);\n\n        if (itemStr != null) {\n          try {\n            const item = JSON.parse(itemStr);\n            console.log(\"ab\" + JSON.stringify(a));\n            console.log(JSON.stringify(item));\n            console.log(JSON.stringify(storedValue));\n            console.log(propertiesEqual(item, storedValue));\n            console.log(deepEqual(item, a));\n\n            if (propertiesEqual(item, storedValue)) {\n              if (!deepEqual(item, a)) {\n                console.log(itemStr);\n                console.log(JSON.stringify(storedValue));\n                setStoredValue(item);\n                a = item;\n              }\n            }\n\n            console.log(\"a\" + JSON.stringify(a));\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }, 3000);\n    }\n  }, []);\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorage, \"5Q8F1AxW2kSZzV1MWhRgP5ZYCSg=\");\n\nexport default useSessionStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useSessionStorage.tsx"],"names":["useEffect","useState","deepEqual","propertiesEqual","useSessionStorage","key","initialValue","check","storedValue","setStoredValue","item","sessionStorage","getItem","JSON","parse","error","console","log","a","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem","setInterval","itemStr"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { deepEqual, propertiesEqual } from \"../../Comparers/ObjectsComparer\";\r\n\r\nconst useSessionStorage = <T extends unknown>(key: string, initialValue:T, check = false) => {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try\r\n        {\r\n            const item = sessionStorage.getItem(key);\r\n            if(item != null && item != \"undefined\")\r\n            {\r\n                return JSON.parse(item);\r\n            }\r\n            return initialValue;\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\r\n            console.log(error);\r\n            return initialValue;\r\n        }   \r\n    });\r\n\r\n    let a = storedValue;\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(check)\r\n        {\r\n            setInterval(() => {\r\n                const itemStr = sessionStorage.getItem(key);\r\n                if(itemStr != null)\r\n                {\r\n                    try\r\n                    {\r\n                        const item = JSON.parse(itemStr) as T;\r\n                        console.log(\"ab\" +JSON.stringify(a));\r\n                        console.log(JSON.stringify(item));\r\n                        console.log(JSON.stringify(storedValue));\r\n                        console.log(propertiesEqual(item, storedValue));\r\n                        console.log(deepEqual(item, a));\r\n                        if(propertiesEqual(item, storedValue))\r\n                        {\r\n                            if(!deepEqual(item, a))\r\n                            {\r\n                                console.log(itemStr);\r\n                                console.log(JSON.stringify(storedValue));\r\n                                setStoredValue(item);\r\n                                a = item;\r\n                            }\r\n                        }\r\n                        console.log(\"a\" +JSON.stringify(a));\r\n                    }\r\n                    catch(error : any)\r\n                    {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            }, 3000);\r\n        }\r\n    }, []);\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorage;"]},"metadata":{},"sourceType":"module"}