{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\TopicPercentsDiagram.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\nimport { GetPercentsExpensesPerTopic } from '../../Services/expense.service/ExpenseService';\nimport RadarDiagram from './Generic/RadarDiagram';\n\nconst randomColor = require('random-color');\n\nconst state = {\n  labels: ['January', 'February', 'March', 'April', 'May'],\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: 'rgba(179,181,198,0.2)',\n    borderColor: 'rgba(179,181,198,1)',\n    pointBackgroundColor: 'rgba(179,181,198,1)',\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(179,181,198,1)',\n    data: [65, 59, 90, 81, 56]\n  }, {\n    label: 'My Second dataset',\n    backgroundColor: 'rgba(255,99,132,0.2)',\n    borderColor: 'rgba(255,99,132,1)',\n    pointBackgroundColor: 'rgba(255,99,132,1)',\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(255,99,132,1)',\n    data: [28, 48, 40, 19, 100]\n  }]\n};\nexport const TopicPercentsDiagram = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [percentsTopic, setPercentsTopic] = useSessionStorage(\"percentsTopic\", []);\n  useEffect(() => {\n    if (percentsTopic.length == 0) {\n      GetPercentsExpensesPerTopic().then(res => {\n        if (res.response.status == 200) {\n          setPercentsTopic([...res.data]);\n          setIsLoading(false);\n        }\n      });\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const getData = () => {\n    let datasets = [];\n    console.log(percentsTopic);\n\n    for (const percent of percentsTopic) {\n      let color = randomColor(0.99, 0.99);\n      let color2 = randomColor(0.99, 0.99);\n      let percents = [];\n      percent.percents.forEach(p => {\n        percents.push(p.sum);\n      });\n      datasets.push({\n        label: percent.currencyCode.toUpperCase(),\n        data: percents,\n        lineTension: 0.1,\n        fill: false,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        pointBackgroundColor: color.rgbString(),\n        pointHoverBorderColor: color.rgbString(),\n        pointHoverBackgroundColor: color2.rgbString(),\n        pointBorderColor: color2.rgbString(),\n        pointBorderWidth: 2,\n        pointHoverRadius: 9,\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10\n      });\n    }\n\n    const topics = [];\n    percentsTopic[0].percents.forEach(p => {\n      topics.push(p.topic);\n    });\n    const data = {\n      labels: topics,\n      datasets: datasets\n    };\n    return data;\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(RadarDiagram, {\n    data: getData(),\n    title: {\n      display: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 13\n  }, this);\n};\n\n_s(TopicPercentsDiagram, \"IzaH18rVMRqdb2B6E7ZhhjKb2Fk=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = TopicPercentsDiagram;\nexport default TopicPercentsDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopicPercentsDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/TopicPercentsDiagram.tsx"],"names":["CircularProgress","React","useEffect","useState","useSessionStorage","GetPercentsExpensesPerTopic","RadarDiagram","randomColor","require","state","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","data","TopicPercentsDiagram","isLoading","setIsLoading","percentsTopic","setPercentsTopic","length","then","res","response","status","getData","console","log","percent","color","color2","percents","forEach","p","push","sum","currencyCode","toUpperCase","lineTension","fill","rgbString","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","topics","topic","display"],"mappings":"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","sourcesContent":["import { CircularProgress } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\r\nimport PercentsTopicExpense from '../../Data/Models/Expenses/PercentsTopicExpense';\r\nimport { GetPercentsExpensesPerTopic } from '../../Services/expense.service/ExpenseService';\r\nimport RadarDiagram from './Generic/RadarDiagram';\r\n\r\nconst randomColor = require('random-color');\r\n\r\nconst state = {\r\n    labels: ['January', 'February', 'March',\r\n             'April', 'May'],\r\n    datasets: [\r\n      {\r\n        label: 'My First dataset',\r\n\t\t\tbackgroundColor: 'rgba(179,181,198,0.2)',\r\n\t\t\tborderColor: 'rgba(179,181,198,1)',\r\n\t\t\tpointBackgroundColor: 'rgba(179,181,198,1)',\r\n\t\t\tpointBorderColor: '#fff',\r\n\t\t\tpointHoverBackgroundColor: '#fff',\r\n\t\t\tpointHoverBorderColor: 'rgba(179,181,198,1)',\r\n\t\t\tdata: [65, 59, 90, 81, 56]\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'My Second dataset',\r\n\t\t\tbackgroundColor: 'rgba(255,99,132,0.2)',\r\n\t\t\tborderColor: 'rgba(255,99,132,1)',\r\n\t\t\tpointBackgroundColor: 'rgba(255,99,132,1)',\r\n\t\t\tpointBorderColor: '#fff',\r\n\t\t\tpointHoverBackgroundColor: '#fff',\r\n\t\t\tpointHoverBorderColor: 'rgba(255,99,132,1)',\r\n\t\t\tdata: [28, 48, 40, 19, 100]\r\n\t\t}\r\n\r\n    ]\r\n  };\r\n\r\nexport const TopicPercentsDiagram: React.FC = () => {\r\n\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n    const [percentsTopic, setPercentsTopic] = useSessionStorage<PercentsTopicExpense[]>(\"percentsTopic\", []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(percentsTopic.length == 0)\r\n\t\t{\r\n\t\t\tGetPercentsExpensesPerTopic()\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res.response.status == 200)\r\n\t\t\t\t{\r\n\t\t\t\t\tsetPercentsTopic([...res.data]);\r\n\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsetIsLoading(false);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst getData = () => {\r\n\t\tlet datasets:any[] = [];\r\n\t\tconsole.log(percentsTopic);\r\n\t\tfor (const percent of percentsTopic) \r\n\t\t{\r\n\t\t\tlet color = randomColor(0.99, 0.99);\r\n\t\t\tlet color2 = randomColor(0.99, 0.99);\r\n  \r\n\t\t\tlet percents: number[] = [];\r\n\r\n\t\t\tpercent.percents.forEach(p => {\r\n\t\t\t\tpercents.push(p.sum);\r\n\t\t\t});\r\n\t\t  \r\n  \r\n\t\t  datasets.push(\r\n\t\t\t{\r\n\t\t\t  label: percent.currencyCode.toUpperCase(),\r\n\t\t\t  data: percents,\r\n\t\t\t  lineTension: 0.1,\r\n\t\t\t  fill: false,\r\n\t\t\t  backgroundColor: color.rgbString(),\r\n\t\t\t  borderColor: color.rgbString(),\r\n\t\t\t  pointBackgroundColor: color.rgbString(),\r\n\t\t\t  pointHoverBorderColor: color.rgbString(),\r\n\t\t\t  pointHoverBackgroundColor: color2.rgbString(),\r\n\t\t\t  pointBorderColor: color2.rgbString(),\r\n\t\t\t  pointBorderWidth: 2,\r\n\t\t\t  pointHoverRadius: 9,\r\n\t\t\t  pointHoverBorderWidth: 2,\r\n\t\t\t  pointRadius: 4,\r\n\t\t\t  pointHitRadius: 10,\r\n\t\t\t  }\r\n\t\t  )\r\n\t\t}\r\n\r\n\t\tconst topics: string[] = [];\r\n\r\n\t\tpercentsTopic[0].percents.forEach(p => {\r\n\t\t\ttopics.push(p.topic);\r\n\t\t})\r\n  \r\n\t\tconst data = {\r\n\t\t  labels: topics,\r\n\t\t  datasets: datasets\r\n\t\t}\r\n  \r\n\t\treturn data;\r\n\t  }\r\n\r\n\tif(isLoading)\r\n    {\r\n      return (<CircularProgress color=\"secondary\" />);\r\n    }\t\r\n\r\n    return (<RadarDiagram data={getData()} title={{\r\n\t\tdisplay: true,\r\n\t\t\r\n\t}} />);\r\n}\r\n\r\nexport default TopicPercentsDiagram;"]},"metadata":{},"sourceType":"module"}