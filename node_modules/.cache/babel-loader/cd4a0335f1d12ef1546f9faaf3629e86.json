{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\TopicPercentsDiagram.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\nimport { GetPercentsExpensesPerTopic } from '../../Services/expense.service/ExpenseService';\nimport RadarDiagram from './Generic/RadarDiagram';\n\nconst randomColor = require('random-color');\n\nexport const TopicPercentsDiagram = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [percentsTopic, setPercentsTopic] = useSessionStorage(\"percentsTopic\", []);\n  useEffect(() => {\n    GetPercentsExpensesPerTopic().then(res => {\n      if (res.response.status == 200) {\n        setPercentsTopic([...res.data]);\n        setIsLoading(false);\n      }\n    });\n  }, []);\n\n  const getData = () => {\n    let datasets = [];\n\n    for (const percent of percentsTopic) {\n      let color = randomColor(0.99, 0.99);\n      let color2 = randomColor(0.99, 0.99);\n      let percents = [];\n      percent.percents.forEach(p => {\n        percents.push(p.sum);\n      });\n      datasets.push({\n        label: percent.currencyCode.toUpperCase(),\n        data: percents,\n        lineTension: 0.1,\n        fill: false,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        pointBackgroundColor: color.rgbString(),\n        pointHoverBorderColor: color2.rgbString(),\n        pointHoverBackgroundColor: color2.rgbString(),\n        pointBorderColor: color.rgbString(),\n        pointBorderWidth: 2,\n        pointHoverRadius: 9,\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10\n      });\n    }\n\n    const topics = [];\n    percentsTopic[0].percents.forEach(p => {\n      topics.push(p.topic);\n    });\n    const data = {\n      labels: topics,\n      datasets: datasets\n    };\n    return data;\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      xs: 12,\n      justify: \"center\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 3\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(RadarDiagram, {\n    data: getData(),\n    title: {\n      display: true,\n      text: \"Percentage expenses\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: \"right\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 13\n  }, this);\n};\n\n_s(TopicPercentsDiagram, \"IzaH18rVMRqdb2B6E7ZhhjKb2Fk=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = TopicPercentsDiagram;\nexport default TopicPercentsDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopicPercentsDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/TopicPercentsDiagram.tsx"],"names":["CircularProgress","Grid","React","useEffect","useState","useSessionStorage","GetPercentsExpensesPerTopic","RadarDiagram","randomColor","require","TopicPercentsDiagram","isLoading","setIsLoading","percentsTopic","setPercentsTopic","then","res","response","status","data","getData","datasets","percent","color","color2","percents","forEach","p","push","sum","label","currencyCode","toUpperCase","lineTension","fill","backgroundColor","rgbString","borderColor","pointBackgroundColor","pointHoverBorderColor","pointHoverBackgroundColor","pointBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","topics","topic","labels","display","text","fontSize","position"],"mappings":"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","sourcesContent":[" import { CircularProgress, Grid } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport useSessionStorage from '../../CustomHooks/StorageHooks/useSessionStorage';\r\nimport PercentsTopicExpense from '../../Data/Models/Expenses/PercentsTopicExpense';\r\nimport { GetPercentsExpensesPerTopic } from '../../Services/expense.service/ExpenseService';\r\nimport RadarDiagram from './Generic/RadarDiagram';\r\n\r\nconst randomColor = require('random-color');\r\n\r\nexport const TopicPercentsDiagram: React.FC = () => {\r\n\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n    const [percentsTopic, setPercentsTopic] = useSessionStorage<PercentsTopicExpense[]>(\"percentsTopic\", []);\r\n\r\n\tuseEffect(() => {\r\n\t\tGetPercentsExpensesPerTopic()\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res.response.status == 200)\r\n\t\t\t\t{\r\n\t\t\t\t\tsetPercentsTopic([...res.data]);\r\n\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst getData = () => {\r\n\t\tlet datasets:any[] = [];\r\n\t\t\r\n\t\tfor (const percent of percentsTopic) \r\n\t\t{\r\n\t\t\tlet color = randomColor(0.99, 0.99);\r\n\t\t\tlet color2 = randomColor(0.99, 0.99);\r\n  \r\n\t\t\tlet percents: number[] = [];\r\n\r\n\t\t\tpercent.percents.forEach(p => {\r\n\t\t\t\tpercents.push(p.sum);\r\n\t\t\t});\r\n\t\t  \r\n  \r\n\t\t  datasets.push(\r\n\t\t\t{\r\n\t\t\t  label: percent.currencyCode.toUpperCase(),\r\n\t\t\t  data: percents,\r\n\t\t\t  lineTension: 0.1,\r\n\t\t\t  fill: false,\r\n\t\t\t  backgroundColor: color.rgbString(),\r\n\t\t\t  borderColor: color.rgbString(),\r\n\t\t\t  pointBackgroundColor: color.rgbString(),\r\n\t\t\t  pointHoverBorderColor: color2.rgbString(),\r\n\t\t\t  pointHoverBackgroundColor: color2.rgbString(),\r\n\t\t\t  pointBorderColor: color.rgbString(),\r\n\t\t\t  pointBorderWidth: 2,\r\n\t\t\t  pointHoverRadius: 9,\r\n\t\t\t  pointHoverBorderWidth: 2,\r\n\t\t\t  pointRadius: 4,\r\n\t\t\t  pointHitRadius: 10,\r\n\t\t\t  }\r\n\t\t  )\r\n\t\t}\r\n\r\n\t\tconst topics: string[] = [];\r\n\r\n\t\tpercentsTopic[0].percents.forEach(p => {\r\n\t\t\ttopics.push(p.topic);\r\n\t\t});\r\n  \r\n\t\tconst data = {\r\n\t\t  labels: topics,\r\n\t\t  datasets: datasets\r\n\t\t}\r\n  \r\n\t\treturn data;\r\n\t  }\r\n\r\n\tif(isLoading)\r\n    {\r\n      return (\r\n\t\t<Grid container xs={12} justify=\"center\">\r\n\t\t\t<CircularProgress color=\"secondary\" />\r\n\t\t</Grid>\r\n\t\t);\r\n    }\t\r\n\r\n    return (<RadarDiagram data={getData()} title={{\r\n\t\tdisplay: true,\r\n\t\ttext: \"Percentage expenses\",\r\n\t\tfontSize: 20\r\n\t}} legend={{\r\n\t\tdisplay: true,\r\n\t\tposition: \"right\"\r\n\t}} />);\r\n}\r\n\r\nexport default TopicPercentsDiagram;"]},"metadata":{},"sourceType":"module"}