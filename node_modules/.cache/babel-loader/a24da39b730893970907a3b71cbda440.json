{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useSessionStorage = (key, initialValue) => {\n  _s();\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      console.log(\"init:\" + initialValue);\n      const item = sessionStorage.getItem(key);\n\n      if (item != null && item != \"undefined\") {\n        console.log(\"if: \" + initialValue + \" item:\" + item);\n        console.log(it);\n        return JSON.parse(item);\n      }\n\n      return initialValue;\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      console.log(\"storedValue: \" + storedValue);\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      sessionStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\n      console.log(error);\n    }\n  };\n\n  const removeValue = () => {\n    const item = sessionStorage.getItem(key);\n\n    if (item != null) {\n      sessionStorage.removeItem(key);\n    }\n  };\n\n  return [storedValue, setValue, removeValue];\n};\n\n_s(useSessionStorage, \"QwMyHJA86Fvru4Ok1dFEECDGq40=\");\n\nexport default useSessionStorage;","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/CustomHooks/StorageHooks/useSessionStorage.tsx"],"names":["useState","useSessionStorage","key","initialValue","storedValue","setStoredValue","console","log","item","sessionStorage","getItem","it","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,iBAAiB,GAAG,CAAoBC,GAApB,EAAiCC,YAAjC,KAAoD;AAAA;;AAE1E,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAI,MAAM;AACpD,QACA;AACIM,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUJ,YAAtB;AACA,YAAMK,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBR,GAAvB,CAAb;;AACA,UAAGM,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,WAA3B,EACA;AACIF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAASJ,YAAT,GAAwB,QAAxB,GAAmCK,IAA/C;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYI,EAAZ;AACA,eAAOC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAP;AACH;;AACD,aAAOL,YAAP;AACH,KAXD,CAYA,OAAMW,KAAN,EACA;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAY,mFAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,aAAOX,YAAP;AACH;AACJ,GAnB6C,CAA9C;;AAqBA,QAAMY,QAAQ,GAAIC,KAAD,IAAc;AAC3B,QACA;AACIV,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBH,WAA9B;AACA,YAAMa,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GACjBF,KAAK,CAACZ,WAAD,CADY,GACIY,KADzB;AAGAX,MAAAA,cAAc,CAACY,YAAD,CAAd;AACAR,MAAAA,cAAc,CAACU,OAAf,CAAuBjB,GAAvB,EAA4BU,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAA5B;AACH,KARD,CASA,OAAMH,KAAN,EACA;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,GAfD;;AAiBA,QAAMO,WAAW,GAAG,MAAM;AACtB,UAAMb,IAAI,GAAGC,cAAc,CAACC,OAAf,CAAuBR,GAAvB,CAAb;;AACA,QAAGM,IAAI,IAAI,IAAX,EACA;AACIC,MAAAA,cAAc,CAACa,UAAf,CAA0BpB,GAA1B;AACH;AACJ,GAND;;AAQA,SAAO,CAACE,WAAD,EAAcW,QAAd,EAAwBM,WAAxB,CAAP;AACH,CAjDD;;GAAMpB,iB;;AAmDN,eAAeA,iBAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useSessionStorage = <T extends unknown>(key: string, initialValue:T) => {\r\n\r\n    const [storedValue, setStoredValue] = useState<T>(() => {\r\n        try\r\n        {\r\n            console.log(\"init:\" + initialValue);\r\n            const item = sessionStorage.getItem(key);\r\n            if(item != null && item != \"undefined\")\r\n            {\r\n                console.log(\"if: \" + initialValue + \" item:\" + item);\r\n                console.log(it)\r\n                return JSON.parse(item);\r\n            }\r\n            return initialValue;\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, useCustomState func, block 'storedValue'\");\r\n            console.log(error);\r\n            return initialValue;\r\n        }   \r\n    });\r\n\r\n    const setValue = (value: T) => {\r\n        try\r\n        {\r\n            console.log(\"storedValue: \" + storedValue);\r\n            const valueToStore = value instanceof Function ?\r\n                value(storedValue) : value;\r\n            \r\n            setStoredValue(valueToStore);\r\n            sessionStorage.setItem(key, JSON.stringify(valueToStore));\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(\"Error happens in useSessionStorage hook, block 'setValue'\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const removeValue = () => {\r\n        const item = sessionStorage.getItem(key);\r\n        if(item != null)\r\n        {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    return [storedValue, setValue, removeValue] as const;\r\n}\r\n\r\nexport default useSessionStorage;"]},"metadata":{},"sourceType":"module"}