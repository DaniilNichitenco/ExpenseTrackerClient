{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\vscommunity\\\\ExpenseTrackerFront\\\\expensetracker\\\\src\\\\Components\\\\Diagrams\\\\ExpensesPerMonthLineDiargam.tsx\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\nimport ExpensesForYearDefault from '../../Data/Models/Expenses/default/ExpensesForYearDefault';\nimport ExpenseService from \"../../Services/expense.service/ExpenseService\";\n\nconst randomColor = require('random-color');\n\nconst ExpensesPerMonthLineDiagram = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [expensesForYearData, setExpensesForYearData, removeExpensesForYearData] = useSessionStorage(\"expensesForYearData\", ExpensesForYearDefault);\n  useEffect(() => {\n    if (expensesForYearData == ExpensesForYearDefault) {\n      ExpenseService.GetExpensesForCurrentYear().then(response => {\n        setExpensesForYearData(response);\n        setIsLoading(false);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const getData = () => {\n    let datasets = [];\n    console.log(expensesForYearData);\n\n    for (const expense of expensesForYearData) {\n      let color = randomColor(0.99, 0.99);\n      let expenses = [];\n      expense.expenses.forEach(exp => {\n        expenses.push(exp.money);\n      });\n      datasets.push({\n        label: expense.currencyCode.toUpperCase(),\n        data: expenses,\n        lineTension: 0.1,\n        fill: false,\n        backgroundColor: color.rgbString(),\n        borderColor: color.rgbString(),\n        pointBorderColor: color.rgbString(),\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 9,\n        pointHoverBackgroundColor: color.rgbString(),\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10\n      });\n    }\n\n    const data = {\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      datasets: datasets\n    };\n    return data;\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(CircularProgress, {\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ExpensesLineDiagram, {\n    data: getData(),\n    title: \"Expenses for current year\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpensesPerMonthLineDiagram, \"JU8fS+sz+ee3IY0y+LOUOGcRpLg=\", false, function () {\n  return [useSessionStorage];\n});\n\n_c = ExpensesPerMonthLineDiagram;\nexport default ExpensesPerMonthLineDiagram;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesPerMonthLineDiagram\");","map":{"version":3,"sources":["D:/vscommunity/ExpenseTrackerFront/expensetracker/src/Components/Diagrams/ExpensesPerMonthLineDiargam.tsx"],"names":["CircularProgress","React","useEffect","useState","useSessionStorage","ExpensesLineDiagram","ExpensesForYearDefault","ExpenseService","randomColor","require","ExpensesPerMonthLineDiagram","props","isLoading","setIsLoading","expensesForYearData","setExpensesForYearData","removeExpensesForYearData","GetExpensesForCurrentYear","then","response","catch","error","console","log","getData","datasets","expense","color","expenses","forEach","exp","push","money","label","currencyCode","toUpperCase","data","lineTension","fill","backgroundColor","rgbString","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","labels"],"mappings":"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","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useSessionStorage from \"../../CustomHooks/StorageHooks/useSessionStorage\";\r\nimport ExpensesLineDiagram from \"./Generic/ExpensesLineDiargam\";\r\nimport ExpensesForYearDefault from '../../Data/Models/Expenses/default/ExpensesForYearDefault';\r\nimport ExpenseService from \"../../Services/expense.service/ExpenseService\";\r\n\r\n\r\nconst randomColor = require('random-color');\r\n\r\ninterface ExpensesPerMonthLineDiagramProps\r\n  {\r\n    paddingLeft?: number,\r\n    paddingRight?: number,\r\n    paddingBottom?: number,\r\n    paddingTop?: number,\r\n    width?: number,\r\n  }\r\n  \r\n\r\n  const ExpensesPerMonthLineDiagram:React.FC<ExpensesPerMonthLineDiagramProps> = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [expensesForYearData, setExpensesForYearData, \r\n      removeExpensesForYearData] = useSessionStorage(\"expensesForYearData\", ExpensesForYearDefault)\r\n\r\n    useEffect(() => {\r\n      if(expensesForYearData == ExpensesForYearDefault)\r\n      {\r\n        ExpenseService.GetExpensesForCurrentYear()\r\n          .then(response => {\r\n            setExpensesForYearData(response);\r\n            setIsLoading(false);\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          })\r\n      }\r\n      setIsLoading(false);\r\n\r\n    }, []);\r\n\r\n    const getData = () => {\r\n      let datasets:any[] = [];\r\n      console.log(expensesForYearData);\r\n      for (const expense of expensesForYearData) {\r\n        let color = randomColor(0.99, 0.99);\r\n\r\n        let expenses: number[] = [];\r\n        expense.expenses.forEach(exp => {\r\n          expenses.push(exp.money);\r\n        });\r\n        \r\n\r\n        datasets.push(\r\n          {\r\n            label: expense.currencyCode.toUpperCase(),\r\n            data: expenses,\r\n            lineTension: 0.1,\r\n            fill: false,\r\n            backgroundColor: color.rgbString(),\r\n            borderColor: color.rgbString(),\r\n            pointBorderColor: color.rgbString(),\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 2,\r\n            pointHoverRadius: 9,\r\n            pointHoverBackgroundColor: color.rgbString(),\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 4,\r\n            pointHitRadius: 10,\r\n            }\r\n        )\r\n      }\r\n\r\n      const data = {\r\n        labels: [\r\n          'January', 'February', 'March',\r\n          'April', 'May', 'June',\r\n          'July', 'August', 'September', 'October',\r\n          'November', 'December'\r\n                ],\r\n        datasets: datasets\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    if(isLoading)\r\n    {\r\n      return (<CircularProgress color=\"secondary\" />);\r\n    }\r\n\r\n    return(\r\n        <ExpensesLineDiagram \r\n        data={getData()}\r\n        title=\"Expenses for current year\"\r\n        />\r\n    );\r\n  }\r\n\r\n  export default ExpensesPerMonthLineDiagram;"]},"metadata":{},"sourceType":"module"}